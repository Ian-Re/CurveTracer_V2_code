
CurveTracerV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800436c  0800436c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800436c  0800436c  0001436c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004374  08004374  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004378  08004378  00014378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800437c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  200000d4  08004450  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004450  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b386  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ca0  00000000  00000000  0002b48a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  0002d130  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022a6f  00000000  00000000  0002e138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000085f7  00000000  00000000  00050ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d272b  00000000  00000000  0005919e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b8c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027fc  00000000  00000000  0012b944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000d4 	.word	0x200000d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004198 	.word	0x08004198

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000d8 	.word	0x200000d8
 800021c:	08004198 	.word	0x08004198

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fb7b 	bl	8000cbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f808 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f8ca 	bl	8000764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 f894 	bl	80006fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ublox_setup();
 80005d4:	f000 fa7e 	bl	8000ad4 <ublox_setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x18>
	...

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0b4      	sub	sp, #208	; 0xd0
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 febe 	bl	800336c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f002 feaf 	bl	800336c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b39      	ldr	r3, [pc, #228]	; (80006f4 <SystemClock_Config+0x118>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	4a38      	ldr	r2, [pc, #224]	; (80006f4 <SystemClock_Config+0x118>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	6413      	str	r3, [r2, #64]	; 0x40
 800061a:	4b36      	ldr	r3, [pc, #216]	; (80006f4 <SystemClock_Config+0x118>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000626:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <SystemClock_Config+0x11c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <SystemClock_Config+0x11c>)
 800062c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <SystemClock_Config+0x11c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064a:	2310      	movs	r3, #16
 800064c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000662:	23d8      	movs	r3, #216	; 0xd8
 8000664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fe9b 	bl	80013b4 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000684:	f000 f892 	bl	80007ac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000688:	f000 fe44 	bl	8001314 <HAL_PWREx_EnableOverDrive>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000692:	f000 f88b 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006bc:	2107      	movs	r1, #7
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f91c 	bl	80018fc <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006ca:	f000 f86f 	bl	80007ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fae0 	bl	8001ca0 <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80006e6:	f000 f861 	bl	80007ac <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	37d0      	adds	r7, #208	; 0xd0
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_USART2_UART_Init+0x64>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART2_UART_Init+0x60>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000728:	f44f 7240 	mov.w	r2, #768	; 0x300
 800072c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000730:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_USART2_UART_Init+0x60>)
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART2_UART_Init+0x60>)
 8000744:	2200      	movs	r2, #0
 8000746:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_USART2_UART_Init+0x60>)
 800074a:	f001 fdf1 	bl	8002330 <HAL_UART_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000754:	f000 f82a 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000104 	.word	0x20000104
 8000760:	40004400 	.word	0x40004400

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0x44>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <MX_GPIO_Init+0x44>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_GPIO_Init+0x44>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_GPIO_Init+0x44>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x44>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x44>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x44>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x44>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x44>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x44>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x44>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <HAL_UART_MspInit+0x8c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d12f      	bne.n	8000886 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000826:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a1a      	ldr	r2, [pc, #104]	; (8000894 <HAL_UART_MspInit+0x90>)
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_UART_MspInit+0x90>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> USART2_CTS
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000856:	230f      	movs	r3, #15
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000866:	2307      	movs	r3, #7
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <HAL_UART_MspInit+0x94>)
 8000872:	f000 fbb5 	bl	8000fe0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2026      	movs	r0, #38	; 0x26
 800087c:	f000 fb57 	bl	8000f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000880:	2026      	movs	r0, #38	; 0x26
 8000882:	f000 fb70 	bl	8000f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40004400 	.word	0x40004400
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ae:	e7fe      	b.n	80008ae <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler+0x4>

080008b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f0:	f000 fa22 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <USART2_IRQHandler+0x10>)
 80008fe:	f001 fe63 	bl	80025c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000104 	.word	0x20000104

0800090c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	strcat(fullmessage,receive);
 8000914:	4912      	ldr	r1, [pc, #72]	; (8000960 <HAL_UART_RxCpltCallback+0x54>)
 8000916:	4813      	ldr	r0, [pc, #76]	; (8000964 <HAL_UART_RxCpltCallback+0x58>)
 8000918:	f002 fd48 	bl	80033ac <strcat>
if (strstr(fullmessage, "OK\r\n") != NULL) {
 800091c:	4912      	ldr	r1, [pc, #72]	; (8000968 <HAL_UART_RxCpltCallback+0x5c>)
 800091e:	4811      	ldr	r0, [pc, #68]	; (8000964 <HAL_UART_RxCpltCallback+0x58>)
 8000920:	f002 fd53 	bl	80033ca <strstr>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d010      	beq.n	800094c <HAL_UART_RxCpltCallback+0x40>

	state = state + 1;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_UART_RxCpltCallback+0x60>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	3301      	adds	r3, #1
 8000930:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_UART_RxCpltCallback+0x60>)
 8000932:	6013      	str	r3, [r2, #0]
	if(state < 13){
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_UART_RxCpltCallback+0x60>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b0c      	cmp	r3, #12
 800093a:	dc04      	bgt.n	8000946 <HAL_UART_RxCpltCallback+0x3a>
	memset(fullmessage,'\0',100);
 800093c:	2264      	movs	r2, #100	; 0x64
 800093e:	2100      	movs	r1, #0
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <HAL_UART_RxCpltCallback+0x58>)
 8000942:	f002 fd13 	bl	800336c <memset>
	}
	ublox_setup();
 8000946:	f000 f8c5 	bl	8000ad4 <ublox_setup>
}
else{
	HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
}

}
 800094a:	e004      	b.n	8000956 <HAL_UART_RxCpltCallback+0x4a>
	HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 800094c:	2201      	movs	r2, #1
 800094e:	4904      	ldr	r1, [pc, #16]	; (8000960 <HAL_UART_RxCpltCallback+0x54>)
 8000950:	4807      	ldr	r0, [pc, #28]	; (8000970 <HAL_UART_RxCpltCallback+0x64>)
 8000952:	f001 fd97 	bl	8002484 <HAL_UART_Receive_IT>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000184 	.word	0x20000184
 8000964:	20000000 	.word	0x20000000
 8000968:	080041b0 	.word	0x080041b0
 800096c:	200000f4 	.word	0x200000f4
 8000970:	20000104 	.word	0x20000104

08000974 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	e00a      	b.n	800099c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000986:	f3af 8000 	nop.w
 800098a:	4601      	mov	r1, r0
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	60ba      	str	r2, [r7, #8]
 8000992:	b2ca      	uxtb	r2, r1
 8000994:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697a      	ldr	r2, [r7, #20]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbf0      	blt.n	8000986 <_read+0x12>
	}

return len;
 80009a4:	687b      	ldr	r3, [r7, #4]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	e009      	b.n	80009d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	3301      	adds	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	429a      	cmp	r2, r3
 80009da:	dbf1      	blt.n	80009c0 <_write+0x12>
	}
	return len;
 80009dc:	687b      	ldr	r3, [r7, #4]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_close>:

int _close(int file)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
	return -1;
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <_isatty>:

int _isatty(int file)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
	return 1;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <_sbrk+0x50>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x16>
		heap_end = &end;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <_sbrk+0x50>)
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <_sbrk+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <_sbrk+0x50>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <_sbrk+0x50>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4413      	add	r3, r2
 8000a74:	466a      	mov	r2, sp
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d907      	bls.n	8000a8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a7a:	f002 fc4d 	bl	8003318 <__errno>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	230c      	movs	r3, #12
 8000a82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a84:	f04f 33ff 	mov.w	r3, #4294967295
 8000a88:	e006      	b.n	8000a98 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <_sbrk+0x50>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <_sbrk+0x50>)
 8000a94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000f0 	.word	0x200000f0
 8000aa4:	20000190 	.word	0x20000190

08000aa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <SystemInit+0x28>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <SystemInit+0x28>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <SystemInit+0x28>)
 8000abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ac2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <ublox_setup>:

int state = 0;
char receive[1];
extern UART_HandleTypeDef huart2;

void ublox_setup(void){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0


	switch(state)
 8000ad8:	4b54      	ldr	r3, [pc, #336]	; (8000c2c <ublox_setup+0x158>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b0c      	cmp	r3, #12
 8000ade:	f200 809f 	bhi.w	8000c20 <ublox_setup+0x14c>
 8000ae2:	a201      	add	r2, pc, #4	; (adr r2, 8000ae8 <ublox_setup+0x14>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000b1d 	.word	0x08000b1d
 8000aec:	08000b31 	.word	0x08000b31
 8000af0:	08000b45 	.word	0x08000b45
 8000af4:	08000b59 	.word	0x08000b59
 8000af8:	08000b6d 	.word	0x08000b6d
 8000afc:	08000b81 	.word	0x08000b81
 8000b00:	08000b95 	.word	0x08000b95
 8000b04:	08000ba9 	.word	0x08000ba9
 8000b08:	08000bbd 	.word	0x08000bbd
 8000b0c:	08000bd1 	.word	0x08000bd1
 8000b10:	08000be5 	.word	0x08000be5
 8000b14:	08000bf9 	.word	0x08000bf9
 8000b18:	08000c0d 	.word	0x08000c0d
	{
	case 0:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)verbose_error_code,sizeof(verbose_error_code));
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	4944      	ldr	r1, [pc, #272]	; (8000c30 <ublox_setup+0x15c>)
 8000b20:	4844      	ldr	r0, [pc, #272]	; (8000c34 <ublox_setup+0x160>)
 8000b22:	f001 fc53 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000b26:	2201      	movs	r2, #1
 8000b28:	4943      	ldr	r1, [pc, #268]	; (8000c38 <ublox_setup+0x164>)
 8000b2a:	4842      	ldr	r0, [pc, #264]	; (8000c34 <ublox_setup+0x160>)
 8000b2c:	f001 fcaa 	bl	8002484 <HAL_UART_Receive_IT>
		//	case 1:
		//		HAL_UART_Transmit_IT(&huart2,(uint8_t *)sim_pin_status,sizeof(sim_pin_status));
		//		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));

	case 1:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)GPRS_attached_stat,sizeof(GPRS_attached_stat));
 8000b30:	220c      	movs	r2, #12
 8000b32:	4942      	ldr	r1, [pc, #264]	; (8000c3c <ublox_setup+0x168>)
 8000b34:	483f      	ldr	r0, [pc, #252]	; (8000c34 <ublox_setup+0x160>)
 8000b36:	f001 fc49 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	493e      	ldr	r1, [pc, #248]	; (8000c38 <ublox_setup+0x164>)
 8000b3e:	483d      	ldr	r0, [pc, #244]	; (8000c34 <ublox_setup+0x160>)
 8000b40:	f001 fca0 	bl	8002484 <HAL_UART_Receive_IT>
	case 2:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)GPRS_attached_stat,sizeof(GPRS_attached_stat));
 8000b44:	220c      	movs	r2, #12
 8000b46:	493d      	ldr	r1, [pc, #244]	; (8000c3c <ublox_setup+0x168>)
 8000b48:	483a      	ldr	r0, [pc, #232]	; (8000c34 <ublox_setup+0x160>)
 8000b4a:	f001 fc3f 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4939      	ldr	r1, [pc, #228]	; (8000c38 <ublox_setup+0x164>)
 8000b52:	4838      	ldr	r0, [pc, #224]	; (8000c34 <ublox_setup+0x160>)
 8000b54:	f001 fc96 	bl	8002484 <HAL_UART_Receive_IT>
	case 3:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)GPRS_APN,sizeof(GPRS_APN));
 8000b58:	221f      	movs	r2, #31
 8000b5a:	4939      	ldr	r1, [pc, #228]	; (8000c40 <ublox_setup+0x16c>)
 8000b5c:	4835      	ldr	r0, [pc, #212]	; (8000c34 <ublox_setup+0x160>)
 8000b5e:	f001 fc35 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000b62:	2201      	movs	r2, #1
 8000b64:	4934      	ldr	r1, [pc, #208]	; (8000c38 <ublox_setup+0x164>)
 8000b66:	4833      	ldr	r0, [pc, #204]	; (8000c34 <ublox_setup+0x160>)
 8000b68:	f001 fc8c 	bl	8002484 <HAL_UART_Receive_IT>
	case 4:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)dynamic_ip,sizeof(dynamic_ip));
 8000b6c:	2218      	movs	r2, #24
 8000b6e:	4935      	ldr	r1, [pc, #212]	; (8000c44 <ublox_setup+0x170>)
 8000b70:	4830      	ldr	r0, [pc, #192]	; (8000c34 <ublox_setup+0x160>)
 8000b72:	f001 fc2b 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000b76:	2201      	movs	r2, #1
 8000b78:	492f      	ldr	r1, [pc, #188]	; (8000c38 <ublox_setup+0x164>)
 8000b7a:	482e      	ldr	r0, [pc, #184]	; (8000c34 <ublox_setup+0x160>)
 8000b7c:	f001 fc82 	bl	8002484 <HAL_UART_Receive_IT>
	case 5:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)Activate_GPRS,sizeof(Activate_GPRS));
 8000b80:	220f      	movs	r2, #15
 8000b82:	4931      	ldr	r1, [pc, #196]	; (8000c48 <ublox_setup+0x174>)
 8000b84:	482b      	ldr	r0, [pc, #172]	; (8000c34 <ublox_setup+0x160>)
 8000b86:	f001 fc21 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	492a      	ldr	r1, [pc, #168]	; (8000c38 <ublox_setup+0x164>)
 8000b8e:	4829      	ldr	r0, [pc, #164]	; (8000c34 <ublox_setup+0x160>)
 8000b90:	f001 fc78 	bl	8002484 <HAL_UART_Receive_IT>
	case 6:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)C_IP,sizeof(C_IP));
 8000b94:	220f      	movs	r2, #15
 8000b96:	492d      	ldr	r1, [pc, #180]	; (8000c4c <ublox_setup+0x178>)
 8000b98:	4826      	ldr	r0, [pc, #152]	; (8000c34 <ublox_setup+0x160>)
 8000b9a:	f001 fc17 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4925      	ldr	r1, [pc, #148]	; (8000c38 <ublox_setup+0x164>)
 8000ba2:	4824      	ldr	r0, [pc, #144]	; (8000c34 <ublox_setup+0x160>)
 8000ba4:	f001 fc6e 	bl	8002484 <HAL_UART_Receive_IT>
	case 7:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)socket_create,sizeof(socket_create));
 8000ba8:	220d      	movs	r2, #13
 8000baa:	4929      	ldr	r1, [pc, #164]	; (8000c50 <ublox_setup+0x17c>)
 8000bac:	4821      	ldr	r0, [pc, #132]	; (8000c34 <ublox_setup+0x160>)
 8000bae:	f001 fc0d 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4920      	ldr	r1, [pc, #128]	; (8000c38 <ublox_setup+0x164>)
 8000bb6:	481f      	ldr	r0, [pc, #124]	; (8000c34 <ublox_setup+0x160>)
 8000bb8:	f001 fc64 	bl	8002484 <HAL_UART_Receive_IT>
	case 8:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)DNS,sizeof(DNS));
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	4925      	ldr	r1, [pc, #148]	; (8000c54 <ublox_setup+0x180>)
 8000bc0:	481c      	ldr	r0, [pc, #112]	; (8000c34 <ublox_setup+0x160>)
 8000bc2:	f001 fc03 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	491b      	ldr	r1, [pc, #108]	; (8000c38 <ublox_setup+0x164>)
 8000bca:	481a      	ldr	r0, [pc, #104]	; (8000c34 <ublox_setup+0x160>)
 8000bcc:	f001 fc5a 	bl	8002484 <HAL_UART_Receive_IT>
	case 9:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)connect,sizeof(connect));
 8000bd0:	221f      	movs	r2, #31
 8000bd2:	4921      	ldr	r1, [pc, #132]	; (8000c58 <ublox_setup+0x184>)
 8000bd4:	4817      	ldr	r0, [pc, #92]	; (8000c34 <ublox_setup+0x160>)
 8000bd6:	f001 fbf9 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4916      	ldr	r1, [pc, #88]	; (8000c38 <ublox_setup+0x164>)
 8000bde:	4815      	ldr	r0, [pc, #84]	; (8000c34 <ublox_setup+0x160>)
 8000be0:	f001 fc50 	bl	8002484 <HAL_UART_Receive_IT>
	case 10:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)greeting,sizeof(greeting));
 8000be4:	2210      	movs	r2, #16
 8000be6:	491d      	ldr	r1, [pc, #116]	; (8000c5c <ublox_setup+0x188>)
 8000be8:	4812      	ldr	r0, [pc, #72]	; (8000c34 <ublox_setup+0x160>)
 8000bea:	f001 fbef 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4911      	ldr	r1, [pc, #68]	; (8000c38 <ublox_setup+0x164>)
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <ublox_setup+0x160>)
 8000bf4:	f001 fc46 	bl	8002484 <HAL_UART_Receive_IT>
	case 11:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)write,sizeof(write));
 8000bf8:	221f      	movs	r2, #31
 8000bfa:	4919      	ldr	r1, [pc, #100]	; (8000c60 <ublox_setup+0x18c>)
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <ublox_setup+0x160>)
 8000bfe:	f001 fbe5 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000c02:	2201      	movs	r2, #1
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <ublox_setup+0x164>)
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <ublox_setup+0x160>)
 8000c08:	f001 fc3c 	bl	8002484 <HAL_UART_Receive_IT>
	case 12:
		HAL_UART_Transmit_IT(&huart2,(uint8_t *)read,sizeof(read));
 8000c0c:	220f      	movs	r2, #15
 8000c0e:	4915      	ldr	r1, [pc, #84]	; (8000c64 <ublox_setup+0x190>)
 8000c10:	4808      	ldr	r0, [pc, #32]	; (8000c34 <ublox_setup+0x160>)
 8000c12:	f001 fbdb 	bl	80023cc <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));
 8000c16:	2201      	movs	r2, #1
 8000c18:	4907      	ldr	r1, [pc, #28]	; (8000c38 <ublox_setup+0x164>)
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <ublox_setup+0x160>)
 8000c1c:	f001 fc32 	bl	8002484 <HAL_UART_Receive_IT>
	default:
		printf("bla");
 8000c20:	4811      	ldr	r0, [pc, #68]	; (8000c68 <ublox_setup+0x194>)
 8000c22:	f002 fbab 	bl	800337c <iprintf>
	//		HAL_UART_Receive(&huart2,(uint8_t *)receive,sizeof(receive),0X00FF);

	//	HAL_UART_Transmit(&huart2,(uint8_t *)check_network_registration,sizeof(check_network_registration),0xFFFF);
	//	HAL_UART_Receive_IT(&huart2,(uint8_t *)receive,sizeof(receive));

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000f4 	.word	0x200000f4
 8000c30:	080041b8 	.word	0x080041b8
 8000c34:	20000104 	.word	0x20000104
 8000c38:	20000184 	.word	0x20000184
 8000c3c:	080041c4 	.word	0x080041c4
 8000c40:	080041d0 	.word	0x080041d0
 8000c44:	080041f0 	.word	0x080041f0
 8000c48:	08004208 	.word	0x08004208
 8000c4c:	08004218 	.word	0x08004218
 8000c50:	08004228 	.word	0x08004228
 8000c54:	08004238 	.word	0x08004238
 8000c58:	08004258 	.word	0x08004258
 8000c5c:	08004278 	.word	0x08004278
 8000c60:	08004288 	.word	0x08004288
 8000c64:	080042a8 	.word	0x080042a8
 8000c68:	080042b8 	.word	0x080042b8

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c72:	e003      	b.n	8000c7c <LoopCopyDataInit>

08000c74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c7a:	3104      	adds	r1, #4

08000c7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c84:	d3f6      	bcc.n	8000c74 <CopyDataInit>
  ldr  r2, =_sbss
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c88:	e002      	b.n	8000c90 <LoopFillZerobss>

08000c8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c8c:	f842 3b04 	str.w	r3, [r2], #4

08000c90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c94:	d3f9      	bcc.n	8000c8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c96:	f7ff ff07 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f002 fb43 	bl	8003324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fc8f 	bl	80005c0 <main>
  bx  lr    
 8000ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8000ca8:	0800437c 	.word	0x0800437c
  ldr  r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cb0:	200000d4 	.word	0x200000d4
  ldr  r2, =_sbss
 8000cb4:	200000d4 	.word	0x200000d4
  ldr  r3, = _ebss
 8000cb8:	20000190 	.word	0x20000190

08000cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC_IRQHandler>

08000cbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 f928 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 f805 	bl	8000cd8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000cce:	f7ff fd75 	bl	80007bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x54>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f943 	bl	8000f82 <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00e      	b.n	8000d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d80a      	bhi.n	8000d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295
 8000d14:	f000 f90b 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <HAL_InitTick+0x5c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000064 	.word	0x20000064
 8000d30:	2000006c 	.word	0x2000006c
 8000d34:	20000068 	.word	0x20000068

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	2000006c 	.word	0x2000006c
 8000d5c:	20000188 	.word	0x20000188

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000188 	.word	0x20000188

08000d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <__NVIC_SetPriorityGrouping+0x40>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	4313      	orrs	r3, r2
 8000da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <__NVIC_SetPriorityGrouping+0x40>)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	60d3      	str	r3, [r2, #12]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00
 8000dbc:	05fa0000 	.word	0x05fa0000

08000dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	; (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff29 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff3e 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff31 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffa2 	bl	8000ed4 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d004      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e00c      	b.n	8000fd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2205      	movs	r2, #5
 8000fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0201 	bic.w	r2, r2, #1
 8000fce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e169      	b.n	80012d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8158 	bne.w	80012ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d00b      	beq.n	800103e <HAL_GPIO_Init+0x5e>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001032:	2b11      	cmp	r3, #17
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b12      	cmp	r3, #18
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	2203      	movs	r2, #3
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x100>
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b12      	cmp	r3, #18
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80b2 	beq.w	80012ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b5f      	ldr	r3, [pc, #380]	; (80012e8 <HAL_GPIO_Init+0x308>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a5e      	ldr	r2, [pc, #376]	; (80012e8 <HAL_GPIO_Init+0x308>)
 8001170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <HAL_GPIO_Init+0x308>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001182:	4a5a      	ldr	r2, [pc, #360]	; (80012ec <HAL_GPIO_Init+0x30c>)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a51      	ldr	r2, [pc, #324]	; (80012f0 <HAL_GPIO_Init+0x310>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d02b      	beq.n	8001206 <HAL_GPIO_Init+0x226>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a50      	ldr	r2, [pc, #320]	; (80012f4 <HAL_GPIO_Init+0x314>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d025      	beq.n	8001202 <HAL_GPIO_Init+0x222>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4f      	ldr	r2, [pc, #316]	; (80012f8 <HAL_GPIO_Init+0x318>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01f      	beq.n	80011fe <HAL_GPIO_Init+0x21e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_GPIO_Init+0x31c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x21a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4d      	ldr	r2, [pc, #308]	; (8001300 <HAL_GPIO_Init+0x320>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x216>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <HAL_GPIO_Init+0x324>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x212>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4b      	ldr	r2, [pc, #300]	; (8001308 <HAL_GPIO_Init+0x328>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x20e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4a      	ldr	r2, [pc, #296]	; (800130c <HAL_GPIO_Init+0x32c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x20a>
 80011e6:	2307      	movs	r3, #7
 80011e8:	e00e      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011ea:	2308      	movs	r3, #8
 80011ec:	e00c      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011ee:	2306      	movs	r3, #6
 80011f0:	e00a      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x228>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x228>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x228>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001218:	4934      	ldr	r1, [pc, #208]	; (80012ec <HAL_GPIO_Init+0x30c>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001226:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <HAL_GPIO_Init+0x330>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124a:	4a31      	ldr	r2, [pc, #196]	; (8001310 <HAL_GPIO_Init+0x330>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_GPIO_Init+0x330>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <HAL_GPIO_Init+0x330>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_GPIO_Init+0x330>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <HAL_GPIO_Init+0x330>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_GPIO_Init+0x330>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_GPIO_Init+0x330>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f ae92 	bls.w	8001000 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	3724      	adds	r7, #36	; 0x24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40013800 	.word	0x40013800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800
 80012fc:	40020c00 	.word	0x40020c00
 8001300:	40021000 	.word	0x40021000
 8001304:	40021400 	.word	0x40021400
 8001308:	40021800 	.word	0x40021800
 800130c:	40021c00 	.word	0x40021c00
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_PWREx_EnableOverDrive+0x98>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a22      	ldr	r2, [pc, #136]	; (80013ac <HAL_PWREx_EnableOverDrive+0x98>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_PWREx_EnableOverDrive+0x98>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001342:	f7ff fd0d 	bl	8000d60 <HAL_GetTick>
 8001346:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001348:	e009      	b.n	800135e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800134a:	f7ff fd09 	bl	8000d60 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001358:	d901      	bls.n	800135e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e022      	b.n	80013a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136a:	d1ee      	bne.n	800134a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001376:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001378:	f7ff fcf2 	bl	8000d60 <HAL_GetTick>
 800137c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800137e:	e009      	b.n	8001394 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001380:	f7ff fcee 	bl	8000d60 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800138e:	d901      	bls.n	8001394 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e007      	b.n	80013a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013a0:	d1ee      	bne.n	8001380 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e291      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 8087 	beq.w	80014e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013d8:	4b96      	ldr	r3, [pc, #600]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d00c      	beq.n	80013fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e4:	4b93      	ldr	r3, [pc, #588]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d112      	bne.n	8001416 <HAL_RCC_OscConfig+0x62>
 80013f0:	4b90      	ldr	r3, [pc, #576]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013fc:	d10b      	bne.n	8001416 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fe:	4b8d      	ldr	r3, [pc, #564]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d06c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x130>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d168      	bne.n	80014e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e26b      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x7a>
 8001420:	4b84      	ldr	r3, [pc, #528]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a83      	ldr	r2, [pc, #524]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	e02e      	b.n	800148c <HAL_RCC_OscConfig+0xd8>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x9c>
 8001436:	4b7f      	ldr	r3, [pc, #508]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a7e      	ldr	r2, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 800143c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b7c      	ldr	r3, [pc, #496]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7b      	ldr	r2, [pc, #492]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e01d      	b.n	800148c <HAL_RCC_OscConfig+0xd8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001458:	d10c      	bne.n	8001474 <HAL_RCC_OscConfig+0xc0>
 800145a:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a75      	ldr	r2, [pc, #468]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	4b73      	ldr	r3, [pc, #460]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a72      	ldr	r2, [pc, #456]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e00b      	b.n	800148c <HAL_RCC_OscConfig+0xd8>
 8001474:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 800147a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	4b6c      	ldr	r3, [pc, #432]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a6b      	ldr	r2, [pc, #428]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001494:	f7ff fc64 	bl	8000d60 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fc60 	bl	8000d60 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	; 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e21f      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b61      	ldr	r3, [pc, #388]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0xe8>
 80014ba:	e014      	b.n	80014e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc50 	bl	8000d60 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fc4c 	bl	8000d60 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	; 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e20b      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d6:	4b57      	ldr	r3, [pc, #348]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x110>
 80014e2:	e000      	b.n	80014e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d069      	beq.n	80015c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f2:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00b      	beq.n	8001516 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b08      	cmp	r3, #8
 8001508:	d11c      	bne.n	8001544 <HAL_RCC_OscConfig+0x190>
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d116      	bne.n	8001544 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d005      	beq.n	800152e <HAL_RCC_OscConfig+0x17a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d001      	beq.n	800152e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e1df      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	493d      	ldr	r1, [pc, #244]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	e040      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d023      	beq.n	8001594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a38      	ldr	r2, [pc, #224]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fc02 	bl	8000d60 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001560:	f7ff fbfe 	bl	8000d60 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e1bd      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b30      	ldr	r3, [pc, #192]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4929      	ldr	r1, [pc, #164]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
 8001592:	e018      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a26      	ldr	r2, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fbde 	bl	8000d60 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a8:	f7ff fbda 	bl	8000d60 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e199      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d038      	beq.n	8001644 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d019      	beq.n	800160e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 80015dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff fbbb 	bl	8000d60 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fbb7 	bl	8000d60 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e176      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x23a>
 800160c:	e01a      	b.n	8001644 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_RCC_OscConfig+0x280>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fba1 	bl	8000d60 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fb9d 	bl	8000d60 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d903      	bls.n	8001638 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e15c      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
 8001634:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	4b91      	ldr	r3, [pc, #580]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800163a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ee      	bne.n	8001622 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a4 	beq.w	800179a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	4b8b      	ldr	r3, [pc, #556]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b88      	ldr	r3, [pc, #544]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a87      	ldr	r2, [pc, #540]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b85      	ldr	r3, [pc, #532]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001676:	2301      	movs	r3, #1
 8001678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167a:	4b82      	ldr	r3, [pc, #520]	; (8001884 <HAL_RCC_OscConfig+0x4d0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001682:	2b00      	cmp	r3, #0
 8001684:	d118      	bne.n	80016b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001686:	4b7f      	ldr	r3, [pc, #508]	; (8001884 <HAL_RCC_OscConfig+0x4d0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a7e      	ldr	r2, [pc, #504]	; (8001884 <HAL_RCC_OscConfig+0x4d0>)
 800168c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001692:	f7ff fb65 	bl	8000d60 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169a:	f7ff fb61 	bl	8000d60 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b64      	cmp	r3, #100	; 0x64
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e120      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ac:	4b75      	ldr	r3, [pc, #468]	; (8001884 <HAL_RCC_OscConfig+0x4d0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d106      	bne.n	80016ce <HAL_RCC_OscConfig+0x31a>
 80016c0:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	; 0x70
 80016cc:	e02d      	b.n	800172a <HAL_RCC_OscConfig+0x376>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x33c>
 80016d6:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016da:	4a69      	ldr	r2, [pc, #420]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6713      	str	r3, [r2, #112]	; 0x70
 80016e2:	4b67      	ldr	r3, [pc, #412]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e6:	4a66      	ldr	r2, [pc, #408]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	6713      	str	r3, [r2, #112]	; 0x70
 80016ee:	e01c      	b.n	800172a <HAL_RCC_OscConfig+0x376>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d10c      	bne.n	8001712 <HAL_RCC_OscConfig+0x35e>
 80016f8:	4b61      	ldr	r3, [pc, #388]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	4a60      	ldr	r2, [pc, #384]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6713      	str	r3, [r2, #112]	; 0x70
 8001704:	4b5e      	ldr	r3, [pc, #376]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	4a5d      	ldr	r2, [pc, #372]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	; 0x70
 8001710:	e00b      	b.n	800172a <HAL_RCC_OscConfig+0x376>
 8001712:	4b5b      	ldr	r3, [pc, #364]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	4a5a      	ldr	r2, [pc, #360]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6713      	str	r3, [r2, #112]	; 0x70
 800171e:	4b58      	ldr	r3, [pc, #352]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	4a57      	ldr	r2, [pc, #348]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d015      	beq.n	800175e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff fb15 	bl	8000d60 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001738:	e00a      	b.n	8001750 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff fb11 	bl	8000d60 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f241 3288 	movw	r2, #5000	; 0x1388
 8001748:	4293      	cmp	r3, r2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0ce      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0ee      	beq.n	800173a <HAL_RCC_OscConfig+0x386>
 800175c:	e014      	b.n	8001788 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff faff 	bl	8000d60 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001764:	e00a      	b.n	800177c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff fafb 	bl	8000d60 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	; 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0b8      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1ee      	bne.n	8001766 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d105      	bne.n	800179a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a3b      	ldr	r2, [pc, #236]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 80a4 	beq.w	80018ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a4:	4b36      	ldr	r3, [pc, #216]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d06b      	beq.n	8001888 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d149      	bne.n	800184c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a30      	ldr	r2, [pc, #192]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff facc 	bl	8000d60 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fac8 	bl	8000d60 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e087      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	3b01      	subs	r3, #1
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	4313      	orrs	r3, r2
 8001810:	4a1b      	ldr	r2, [pc, #108]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001816:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a18      	ldr	r2, [pc, #96]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800181e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001824:	f7ff fa9c 	bl	8000d60 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff fa98 	bl	8000d60 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e057      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x478>
 800184a:	e04f      	b.n	80018ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fa82 	bl	8000d60 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fa7e 	bl	8000d60 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e03d      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_RCC_OscConfig+0x4cc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x4ac>
 800187e:	e035      	b.n	80018ec <HAL_RCC_OscConfig+0x538>
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_RCC_OscConfig+0x544>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d028      	beq.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d121      	bne.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d11a      	bne.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018b8:	4013      	ands	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	085b      	lsrs	r3, r3, #1
 80018d0:	3b01      	subs	r3, #1
 80018d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d0      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 020f 	bic.w	r2, r3, #15
 800192a:	4965      	ldr	r1, [pc, #404]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800197e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d040      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d115      	bne.n	80019de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e073      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06b      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019de:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f023 0203 	bic.w	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4936      	ldr	r1, [pc, #216]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f0:	f7ff f9b6 	bl	8000d60 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7ff f9b2 	bl	8000d60 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e053      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 020c 	and.w	r2, r3, #12
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1eb      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d210      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 020f 	bic.w	r2, r3, #15
 8001a36:	4922      	ldr	r1, [pc, #136]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f821 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a92:	4601      	mov	r1, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_RCC_ClockConfig+0x1cc>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1d0>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1d4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f912 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023c00 	.word	0x40023c00
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	080042bc 	.word	0x080042bc
 8001acc:	20000064 	.word	0x20000064
 8001ad0:	20000068 	.word	0x20000068

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aea:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d007      	beq.n	8001b06 <HAL_RCC_GetSysClockFreq+0x32>
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d008      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x38>
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 808d 	bne.w	8001c1a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b02:	60bb      	str	r3, [r7, #8]
      break;
 8001b04:	e08c      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b06:	4b4b      	ldr	r3, [pc, #300]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b08:	60bb      	str	r3, [r7, #8]
      break;
 8001b0a:	e089      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b0c:	4b47      	ldr	r3, [pc, #284]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b14:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b16:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d023      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b22:	4b42      	ldr	r3, [pc, #264]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	099b      	lsrs	r3, r3, #6
 8001b28:	f04f 0400 	mov.w	r4, #0
 8001b2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	ea03 0501 	and.w	r5, r3, r1
 8001b38:	ea04 0602 	and.w	r6, r4, r2
 8001b3c:	4a3d      	ldr	r2, [pc, #244]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b3e:	fb02 f106 	mul.w	r1, r2, r6
 8001b42:	2200      	movs	r2, #0
 8001b44:	fb02 f205 	mul.w	r2, r2, r5
 8001b48:	440a      	add	r2, r1
 8001b4a:	493a      	ldr	r1, [pc, #232]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b4c:	fba5 0101 	umull	r0, r1, r5, r1
 8001b50:	1853      	adds	r3, r2, r1
 8001b52:	4619      	mov	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f04f 0400 	mov.w	r4, #0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4623      	mov	r3, r4
 8001b5e:	f7fe fbaf 	bl	80002c0 <__aeabi_uldivmod>
 8001b62:	4603      	mov	r3, r0
 8001b64:	460c      	mov	r4, r1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	e049      	b.n	8001bfe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b6a:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	099b      	lsrs	r3, r3, #6
 8001b70:	f04f 0400 	mov.w	r4, #0
 8001b74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	ea03 0501 	and.w	r5, r3, r1
 8001b80:	ea04 0602 	and.w	r6, r4, r2
 8001b84:	4629      	mov	r1, r5
 8001b86:	4632      	mov	r2, r6
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	f04f 0400 	mov.w	r4, #0
 8001b90:	0154      	lsls	r4, r2, #5
 8001b92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b96:	014b      	lsls	r3, r1, #5
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4622      	mov	r2, r4
 8001b9c:	1b49      	subs	r1, r1, r5
 8001b9e:	eb62 0206 	sbc.w	r2, r2, r6
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	f04f 0400 	mov.w	r4, #0
 8001baa:	0194      	lsls	r4, r2, #6
 8001bac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bb0:	018b      	lsls	r3, r1, #6
 8001bb2:	1a5b      	subs	r3, r3, r1
 8001bb4:	eb64 0402 	sbc.w	r4, r4, r2
 8001bb8:	f04f 0100 	mov.w	r1, #0
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	00e2      	lsls	r2, r4, #3
 8001bc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bc6:	00d9      	lsls	r1, r3, #3
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4614      	mov	r4, r2
 8001bcc:	195b      	adds	r3, r3, r5
 8001bce:	eb44 0406 	adc.w	r4, r4, r6
 8001bd2:	f04f 0100 	mov.w	r1, #0
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	02a2      	lsls	r2, r4, #10
 8001bdc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001be0:	0299      	lsls	r1, r3, #10
 8001be2:	460b      	mov	r3, r1
 8001be4:	4614      	mov	r4, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	4621      	mov	r1, r4
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f04f 0400 	mov.w	r4, #0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4623      	mov	r3, r4
 8001bf4:	f7fe fb64 	bl	80002c0 <__aeabi_uldivmod>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	0c1b      	lsrs	r3, r3, #16
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	3301      	adds	r3, #1
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	60bb      	str	r3, [r7, #8]
      break;
 8001c18:	e002      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c1c:	60bb      	str	r3, [r7, #8]
      break;
 8001c1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c20:	68bb      	ldr	r3, [r7, #8]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	00f42400 	.word	0x00f42400
 8001c34:	017d7840 	.word	0x017d7840

08001c38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000064 	.word	0x20000064

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c54:	f7ff fff0 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c58:	4601      	mov	r1, r0
 8001c5a:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	0a9b      	lsrs	r3, r3, #10
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	080042cc 	.word	0x080042cc

08001c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	f7ff ffdc 	bl	8001c38 <HAL_RCC_GetHCLKFreq>
 8001c80:	4601      	mov	r1, r0
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	0b5b      	lsrs	r3, r3, #13
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8e:	5cd3      	ldrb	r3, [r2, r3]
 8001c90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	080042cc 	.word	0x080042cc

08001ca0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d012      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a64      	ldr	r2, [pc, #400]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001cce:	6093      	str	r3, [r2, #8]
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	4960      	ldr	r1, [pc, #384]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d017      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cf6:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d04:	4955      	ldr	r1, [pc, #340]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d14:	d101      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d017      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	4946      	ldr	r1, [pc, #280]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d50:	d101      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 808b 	beq.w	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	4a39      	ldr	r2, [pc, #228]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7c:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d88:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d94:	f7fe ffe4 	bl	8000d60 <HAL_GetTick>
 8001d98:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9c:	f7fe ffe0 	bl	8000d60 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e2ba      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d035      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d02e      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dfa:	4a18      	ldr	r2, [pc, #96]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d114      	bne.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ffa8 	bl	8000d60 <HAL_GetTick>
 8001e10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	e00a      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7fe ffa4 	bl	8000d60 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e27c      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ee      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001e42:	d111      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e52:	400b      	ands	r3, r1
 8001e54:	4901      	ldr	r1, [pc, #4]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40007000 	.word	0x40007000
 8001e64:	0ffffcff 	.word	0x0ffffcff
 8001e68:	4ba3      	ldr	r3, [pc, #652]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4aa2      	ldr	r2, [pc, #648]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001e72:	6093      	str	r3, [r2, #8]
 8001e74:	4ba0      	ldr	r3, [pc, #640]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	499d      	ldr	r1, [pc, #628]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e92:	4b99      	ldr	r3, [pc, #612]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e98:	4a97      	ldr	r2, [pc, #604]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ea2:	4b95      	ldr	r3, [pc, #596]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ea4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4992      	ldr	r1, [pc, #584]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ec0:	4b8d      	ldr	r3, [pc, #564]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	498a      	ldr	r1, [pc, #552]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ee2:	4b85      	ldr	r3, [pc, #532]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef0:	4981      	ldr	r1, [pc, #516]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f04:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f12:	4979      	ldr	r1, [pc, #484]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f26:	4b74      	ldr	r3, [pc, #464]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	f023 0203 	bic.w	r2, r3, #3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	4970      	ldr	r1, [pc, #448]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f48:	4b6b      	ldr	r3, [pc, #428]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f023 020c 	bic.w	r2, r3, #12
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4968      	ldr	r1, [pc, #416]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00a      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f6a:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	495f      	ldr	r1, [pc, #380]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9a:	4957      	ldr	r1, [pc, #348]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fae:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbc:	494e      	ldr	r1, [pc, #312]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fd0:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	4946      	ldr	r1, [pc, #280]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	493d      	ldr	r1, [pc, #244]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002014:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	4935      	ldr	r1, [pc, #212]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d011      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002036:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002044:	492c      	ldr	r1, [pc, #176]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002046:	4313      	orrs	r3, r2
 8002048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002054:	d101      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002074:	4920      	ldr	r1, [pc, #128]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002096:	4918      	ldr	r1, [pc, #96]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020b8:	490f      	ldr	r1, [pc, #60]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d005      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ce:	f040 809c 	bne.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80020d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020de:	f7fe fe3f 	bl	8000d60 <HAL_GetTick>
 80020e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020e6:	f7fe fe3b 	bl	8000d60 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b64      	cmp	r3, #100	; 0x64
 80020f2:	d903      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e115      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80020f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020fc:	4b8b      	ldr	r3, [pc, #556]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ee      	bne.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d017      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d113      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800211c:	4b83      	ldr	r3, [pc, #524]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800211e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002122:	0e1b      	lsrs	r3, r3, #24
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	019a      	lsls	r2, r3, #6
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	071b      	lsls	r3, r3, #28
 800213c:	497b      	ldr	r1, [pc, #492]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002162:	2b00      	cmp	r3, #0
 8002164:	d024      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216e:	d11f      	bne.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002170:	4b6e      	ldr	r3, [pc, #440]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002176:	0f1b      	lsrs	r3, r3, #28
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	019a      	lsls	r2, r3, #6
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	431a      	orrs	r2, r3
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	071b      	lsls	r3, r3, #28
 8002190:	4966      	ldr	r1, [pc, #408]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002198:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800219a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800219e:	f023 021f 	bic.w	r2, r3, #31
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	4960      	ldr	r1, [pc, #384]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00d      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	019a      	lsls	r2, r3, #6
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	071b      	lsls	r3, r3, #28
 80021d0:	4956      	ldr	r1, [pc, #344]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021d8:	4b54      	ldr	r3, [pc, #336]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a53      	ldr	r2, [pc, #332]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80021de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e4:	f7fe fdbc 	bl	8000d60 <HAL_GetTick>
 80021e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021ec:	f7fe fdb8 	bl	8000d60 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e092      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021fe:	4b4b      	ldr	r3, [pc, #300]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b01      	cmp	r3, #1
 800220e:	f040 8088 	bne.w	8002322 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a45      	ldr	r2, [pc, #276]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221e:	f7fe fd9f 	bl	8000d60 <HAL_GetTick>
 8002222:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002226:	f7fe fd9b 	bl	8000d60 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	; 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e075      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002238:	4b3c      	ldr	r3, [pc, #240]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002244:	d0ef      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002262:	2b00      	cmp	r3, #0
 8002264:	d024      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	2b00      	cmp	r3, #0
 800226c:	d120      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800226e:	4b2f      	ldr	r3, [pc, #188]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	019a      	lsls	r2, r3, #6
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	4927      	ldr	r1, [pc, #156]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002296:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	4920      	ldr	r1, [pc, #128]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d018      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022c4:	d113      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022cc:	0e1b      	lsrs	r3, r3, #24
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	019a      	lsls	r2, r3, #6
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	041b      	lsls	r3, r3, #16
 80022e0:	431a      	orrs	r2, r3
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	4911      	ldr	r1, [pc, #68]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80022f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022fa:	f7fe fd31 	bl	8000d60 <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002302:	f7fe fd2d 	bl	8000d60 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b64      	cmp	r3, #100	; 0x64
 800230e:	d901      	bls.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e007      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800231c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002320:	d1ef      	bne.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e040      	b.n	80023c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fa56 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	; 0x24
 800235c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fa70 	bl	8002854 <UART_SetConfig>
 8002374:	4603      	mov	r3, r0
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e022      	b.n	80023c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fd0e 	bl	8002da8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800239a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fd95 	bl	8002eec <UART_CheckIdleState>
 80023c2:	4603      	mov	r3, r0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d144      	bne.n	800246c <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_UART_Transmit_IT+0x22>
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e03d      	b.n	800246e <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_UART_Transmit_IT+0x34>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e036      	b.n	800246e <HAL_UART_Transmit_IT+0xa2>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	88fa      	ldrh	r2, [r7, #6]
 8002412:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2221      	movs	r2, #33	; 0x21
 800242e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002438:	d107      	bne.n	800244a <HAL_UART_Transmit_IT+0x7e>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d103      	bne.n	800244a <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4a0d      	ldr	r2, [pc, #52]	; (800247c <HAL_UART_Transmit_IT+0xb0>)
 8002446:	665a      	str	r2, [r3, #100]	; 0x64
 8002448:	e002      	b.n	8002450 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <HAL_UART_Transmit_IT+0xb4>)
 800244e:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002466:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	0800311f 	.word	0x0800311f
 8002480:	080030ad 	.word	0x080030ad

08002484 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	4613      	mov	r3, r2
 8002490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002496:	2b20      	cmp	r3, #32
 8002498:	f040 808a 	bne.w	80025b0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_UART_Receive_IT+0x24>
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e082      	b.n	80025b2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_UART_Receive_IT+0x36>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e07b      	b.n	80025b2 <HAL_UART_Receive_IT+0x12e>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e6:	d10e      	bne.n	8002506 <HAL_UART_Receive_IT+0x82>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_UART_Receive_IT+0x78>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024fa:	e02d      	b.n	8002558 <HAL_UART_Receive_IT+0xd4>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	22ff      	movs	r2, #255	; 0xff
 8002500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002504:	e028      	b.n	8002558 <HAL_UART_Receive_IT+0xd4>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10d      	bne.n	800252a <HAL_UART_Receive_IT+0xa6>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <HAL_UART_Receive_IT+0x9c>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	22ff      	movs	r2, #255	; 0xff
 800251a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800251e:	e01b      	b.n	8002558 <HAL_UART_Receive_IT+0xd4>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	227f      	movs	r2, #127	; 0x7f
 8002524:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002528:	e016      	b.n	8002558 <HAL_UART_Receive_IT+0xd4>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002532:	d10d      	bne.n	8002550 <HAL_UART_Receive_IT+0xcc>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d104      	bne.n	8002546 <HAL_UART_Receive_IT+0xc2>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	227f      	movs	r2, #127	; 0x7f
 8002540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002544:	e008      	b.n	8002558 <HAL_UART_Receive_IT+0xd4>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	223f      	movs	r2, #63	; 0x3f
 800254a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800254e:	e003      	b.n	8002558 <HAL_UART_Receive_IT+0xd4>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2222      	movs	r2, #34	; 0x22
 8002562:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257c:	d107      	bne.n	800258e <HAL_UART_Receive_IT+0x10a>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4a0d      	ldr	r2, [pc, #52]	; (80025c0 <HAL_UART_Receive_IT+0x13c>)
 800258a:	661a      	str	r2, [r3, #96]	; 0x60
 800258c:	e002      	b.n	8002594 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <HAL_UART_Receive_IT+0x140>)
 8002592:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80025aa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	08003273 	.word	0x08003273
 80025c4:	080031cd 	.word	0x080031cd

080025c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d113      	bne.n	8002620 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00e      	beq.n	8002620 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8100 	beq.w	8002816 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	4798      	blx	r3
      }
      return;
 800261e:	e0fa      	b.n	8002816 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80d5 	beq.w	80027d2 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d105      	bne.n	800263e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80ca 	beq.w	80027d2 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <HAL_UART_IRQHandler+0x9e>
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800265e:	f043 0201 	orr.w	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00e      	beq.n	800268e <HAL_UART_IRQHandler+0xc6>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2202      	movs	r2, #2
 8002680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002686:	f043 0204 	orr.w	r2, r3, #4
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00e      	beq.n	80026b6 <HAL_UART_IRQHandler+0xee>
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2204      	movs	r2, #4
 80026a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026ae:	f043 0202 	orr.w	r2, r3, #2
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d013      	beq.n	80026e8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d009      	beq.n	80026e8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2208      	movs	r2, #8
 80026da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e0:	f043 0208 	orr.w	r2, r3, #8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00f      	beq.n	8002712 <HAL_UART_IRQHandler+0x14a>
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d07f      	beq.n	800281a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00c      	beq.n	800273e <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002742:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	2b40      	cmp	r3, #64	; 0x40
 8002750:	d004      	beq.n	800275c <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002758:	2b00      	cmp	r3, #0
 800275a:	d031      	beq.n	80027c0 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fc6f 	bl	8003040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d123      	bne.n	80027b8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800278c:	4a26      	ldr	r2, [pc, #152]	; (8002828 <HAL_UART_IRQHandler+0x260>)
 800278e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fc00 	bl	8000f9a <HAL_DMA_Abort_IT>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d016      	beq.n	80027ce <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80027aa:	4610      	mov	r0, r2
 80027ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ae:	e00e      	b.n	80027ce <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f845 	bl	8002840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b6:	e00a      	b.n	80027ce <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f841 	bl	8002840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027be:	e006      	b.n	80027ce <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f83d 	bl	8002840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80027cc:	e025      	b.n	800281a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ce:	bf00      	nop
    return;
 80027d0:	e023      	b.n	800281a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d017      	beq.n	800281e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4798      	blx	r3
    }
    return;
 80027f6:	e012      	b.n	800281e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <HAL_UART_IRQHandler+0x258>
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fcc4 	bl	800319a <UART_EndTransmit_IT>
    return;
 8002812:	bf00      	nop
 8002814:	e004      	b.n	8002820 <HAL_UART_IRQHandler+0x258>
      return;
 8002816:	bf00      	nop
 8002818:	e002      	b.n	8002820 <HAL_UART_IRQHandler+0x258>
    return;
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <HAL_UART_IRQHandler+0x258>
    return;
 800281e:	bf00      	nop
  }

}
 8002820:	3720      	adds	r7, #32
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	08003081 	.word	0x08003081

0800282c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4bb1      	ldr	r3, [pc, #708]	; (8002b48 <UART_SetConfig+0x2f4>)
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	6939      	ldr	r1, [r7, #16]
 800288c:	430b      	orrs	r3, r1
 800288e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a9f      	ldr	r2, [pc, #636]	; (8002b4c <UART_SetConfig+0x2f8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d121      	bne.n	8002918 <UART_SetConfig+0xc4>
 80028d4:	4b9e      	ldr	r3, [pc, #632]	; (8002b50 <UART_SetConfig+0x2fc>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d816      	bhi.n	8002910 <UART_SetConfig+0xbc>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <UART_SetConfig+0x94>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	08002905 	.word	0x08002905
 80028f0:	080028ff 	.word	0x080028ff
 80028f4:	0800290b 	.word	0x0800290b
 80028f8:	2301      	movs	r3, #1
 80028fa:	77fb      	strb	r3, [r7, #31]
 80028fc:	e151      	b.n	8002ba2 <UART_SetConfig+0x34e>
 80028fe:	2302      	movs	r3, #2
 8002900:	77fb      	strb	r3, [r7, #31]
 8002902:	e14e      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002904:	2304      	movs	r3, #4
 8002906:	77fb      	strb	r3, [r7, #31]
 8002908:	e14b      	b.n	8002ba2 <UART_SetConfig+0x34e>
 800290a:	2308      	movs	r3, #8
 800290c:	77fb      	strb	r3, [r7, #31]
 800290e:	e148      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002910:	2310      	movs	r3, #16
 8002912:	77fb      	strb	r3, [r7, #31]
 8002914:	bf00      	nop
 8002916:	e144      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a8d      	ldr	r2, [pc, #564]	; (8002b54 <UART_SetConfig+0x300>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d134      	bne.n	800298c <UART_SetConfig+0x138>
 8002922:	4b8b      	ldr	r3, [pc, #556]	; (8002b50 <UART_SetConfig+0x2fc>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b0c      	cmp	r3, #12
 800292e:	d829      	bhi.n	8002984 <UART_SetConfig+0x130>
 8002930:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <UART_SetConfig+0xe4>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	0800296d 	.word	0x0800296d
 800293c:	08002985 	.word	0x08002985
 8002940:	08002985 	.word	0x08002985
 8002944:	08002985 	.word	0x08002985
 8002948:	08002979 	.word	0x08002979
 800294c:	08002985 	.word	0x08002985
 8002950:	08002985 	.word	0x08002985
 8002954:	08002985 	.word	0x08002985
 8002958:	08002973 	.word	0x08002973
 800295c:	08002985 	.word	0x08002985
 8002960:	08002985 	.word	0x08002985
 8002964:	08002985 	.word	0x08002985
 8002968:	0800297f 	.word	0x0800297f
 800296c:	2300      	movs	r3, #0
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e117      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002972:	2302      	movs	r3, #2
 8002974:	77fb      	strb	r3, [r7, #31]
 8002976:	e114      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002978:	2304      	movs	r3, #4
 800297a:	77fb      	strb	r3, [r7, #31]
 800297c:	e111      	b.n	8002ba2 <UART_SetConfig+0x34e>
 800297e:	2308      	movs	r3, #8
 8002980:	77fb      	strb	r3, [r7, #31]
 8002982:	e10e      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002984:	2310      	movs	r3, #16
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	bf00      	nop
 800298a:	e10a      	b.n	8002ba2 <UART_SetConfig+0x34e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a71      	ldr	r2, [pc, #452]	; (8002b58 <UART_SetConfig+0x304>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d120      	bne.n	80029d8 <UART_SetConfig+0x184>
 8002996:	4b6e      	ldr	r3, [pc, #440]	; (8002b50 <UART_SetConfig+0x2fc>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d00f      	beq.n	80029c4 <UART_SetConfig+0x170>
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d802      	bhi.n	80029ae <UART_SetConfig+0x15a>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <UART_SetConfig+0x164>
 80029ac:	e010      	b.n	80029d0 <UART_SetConfig+0x17c>
 80029ae:	2b20      	cmp	r3, #32
 80029b0:	d005      	beq.n	80029be <UART_SetConfig+0x16a>
 80029b2:	2b30      	cmp	r3, #48	; 0x30
 80029b4:	d009      	beq.n	80029ca <UART_SetConfig+0x176>
 80029b6:	e00b      	b.n	80029d0 <UART_SetConfig+0x17c>
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e0f1      	b.n	8002ba2 <UART_SetConfig+0x34e>
 80029be:	2302      	movs	r3, #2
 80029c0:	77fb      	strb	r3, [r7, #31]
 80029c2:	e0ee      	b.n	8002ba2 <UART_SetConfig+0x34e>
 80029c4:	2304      	movs	r3, #4
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e0eb      	b.n	8002ba2 <UART_SetConfig+0x34e>
 80029ca:	2308      	movs	r3, #8
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	e0e8      	b.n	8002ba2 <UART_SetConfig+0x34e>
 80029d0:	2310      	movs	r3, #16
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	bf00      	nop
 80029d6:	e0e4      	b.n	8002ba2 <UART_SetConfig+0x34e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a5f      	ldr	r2, [pc, #380]	; (8002b5c <UART_SetConfig+0x308>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d120      	bne.n	8002a24 <UART_SetConfig+0x1d0>
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <UART_SetConfig+0x2fc>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d00f      	beq.n	8002a10 <UART_SetConfig+0x1bc>
 80029f0:	2b40      	cmp	r3, #64	; 0x40
 80029f2:	d802      	bhi.n	80029fa <UART_SetConfig+0x1a6>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <UART_SetConfig+0x1b0>
 80029f8:	e010      	b.n	8002a1c <UART_SetConfig+0x1c8>
 80029fa:	2b80      	cmp	r3, #128	; 0x80
 80029fc:	d005      	beq.n	8002a0a <UART_SetConfig+0x1b6>
 80029fe:	2bc0      	cmp	r3, #192	; 0xc0
 8002a00:	d009      	beq.n	8002a16 <UART_SetConfig+0x1c2>
 8002a02:	e00b      	b.n	8002a1c <UART_SetConfig+0x1c8>
 8002a04:	2300      	movs	r3, #0
 8002a06:	77fb      	strb	r3, [r7, #31]
 8002a08:	e0cb      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	77fb      	strb	r3, [r7, #31]
 8002a0e:	e0c8      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a10:	2304      	movs	r3, #4
 8002a12:	77fb      	strb	r3, [r7, #31]
 8002a14:	e0c5      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a16:	2308      	movs	r3, #8
 8002a18:	77fb      	strb	r3, [r7, #31]
 8002a1a:	e0c2      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	77fb      	strb	r3, [r7, #31]
 8002a20:	bf00      	nop
 8002a22:	e0be      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a4d      	ldr	r2, [pc, #308]	; (8002b60 <UART_SetConfig+0x30c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d124      	bne.n	8002a78 <UART_SetConfig+0x224>
 8002a2e:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <UART_SetConfig+0x2fc>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3c:	d012      	beq.n	8002a64 <UART_SetConfig+0x210>
 8002a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a42:	d802      	bhi.n	8002a4a <UART_SetConfig+0x1f6>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <UART_SetConfig+0x204>
 8002a48:	e012      	b.n	8002a70 <UART_SetConfig+0x21c>
 8002a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a4e:	d006      	beq.n	8002a5e <UART_SetConfig+0x20a>
 8002a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a54:	d009      	beq.n	8002a6a <UART_SetConfig+0x216>
 8002a56:	e00b      	b.n	8002a70 <UART_SetConfig+0x21c>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]
 8002a5c:	e0a1      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	77fb      	strb	r3, [r7, #31]
 8002a62:	e09e      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a64:	2304      	movs	r3, #4
 8002a66:	77fb      	strb	r3, [r7, #31]
 8002a68:	e09b      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	77fb      	strb	r3, [r7, #31]
 8002a6e:	e098      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a70:	2310      	movs	r3, #16
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	bf00      	nop
 8002a76:	e094      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a39      	ldr	r2, [pc, #228]	; (8002b64 <UART_SetConfig+0x310>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d124      	bne.n	8002acc <UART_SetConfig+0x278>
 8002a82:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <UART_SetConfig+0x2fc>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a90:	d012      	beq.n	8002ab8 <UART_SetConfig+0x264>
 8002a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a96:	d802      	bhi.n	8002a9e <UART_SetConfig+0x24a>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <UART_SetConfig+0x258>
 8002a9c:	e012      	b.n	8002ac4 <UART_SetConfig+0x270>
 8002a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aa2:	d006      	beq.n	8002ab2 <UART_SetConfig+0x25e>
 8002aa4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002aa8:	d009      	beq.n	8002abe <UART_SetConfig+0x26a>
 8002aaa:	e00b      	b.n	8002ac4 <UART_SetConfig+0x270>
 8002aac:	2301      	movs	r3, #1
 8002aae:	77fb      	strb	r3, [r7, #31]
 8002ab0:	e077      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	e074      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002ab8:	2304      	movs	r3, #4
 8002aba:	77fb      	strb	r3, [r7, #31]
 8002abc:	e071      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002abe:	2308      	movs	r3, #8
 8002ac0:	77fb      	strb	r3, [r7, #31]
 8002ac2:	e06e      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	77fb      	strb	r3, [r7, #31]
 8002ac8:	bf00      	nop
 8002aca:	e06a      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <UART_SetConfig+0x314>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d124      	bne.n	8002b20 <UART_SetConfig+0x2cc>
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <UART_SetConfig+0x2fc>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae4:	d012      	beq.n	8002b0c <UART_SetConfig+0x2b8>
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aea:	d802      	bhi.n	8002af2 <UART_SetConfig+0x29e>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <UART_SetConfig+0x2ac>
 8002af0:	e012      	b.n	8002b18 <UART_SetConfig+0x2c4>
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af6:	d006      	beq.n	8002b06 <UART_SetConfig+0x2b2>
 8002af8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002afc:	d009      	beq.n	8002b12 <UART_SetConfig+0x2be>
 8002afe:	e00b      	b.n	8002b18 <UART_SetConfig+0x2c4>
 8002b00:	2300      	movs	r3, #0
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e04d      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	77fb      	strb	r3, [r7, #31]
 8002b0a:	e04a      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	77fb      	strb	r3, [r7, #31]
 8002b10:	e047      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b12:	2308      	movs	r3, #8
 8002b14:	77fb      	strb	r3, [r7, #31]
 8002b16:	e044      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b18:	2310      	movs	r3, #16
 8002b1a:	77fb      	strb	r3, [r7, #31]
 8002b1c:	bf00      	nop
 8002b1e:	e040      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <UART_SetConfig+0x318>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d139      	bne.n	8002b9e <UART_SetConfig+0x34a>
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <UART_SetConfig+0x2fc>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b38:	d027      	beq.n	8002b8a <UART_SetConfig+0x336>
 8002b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b3e:	d817      	bhi.n	8002b70 <UART_SetConfig+0x31c>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d01c      	beq.n	8002b7e <UART_SetConfig+0x32a>
 8002b44:	e027      	b.n	8002b96 <UART_SetConfig+0x342>
 8002b46:	bf00      	nop
 8002b48:	efff69f3 	.word	0xefff69f3
 8002b4c:	40011000 	.word	0x40011000
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40004400 	.word	0x40004400
 8002b58:	40004800 	.word	0x40004800
 8002b5c:	40004c00 	.word	0x40004c00
 8002b60:	40005000 	.word	0x40005000
 8002b64:	40011400 	.word	0x40011400
 8002b68:	40007800 	.word	0x40007800
 8002b6c:	40007c00 	.word	0x40007c00
 8002b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b74:	d006      	beq.n	8002b84 <UART_SetConfig+0x330>
 8002b76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b7a:	d009      	beq.n	8002b90 <UART_SetConfig+0x33c>
 8002b7c:	e00b      	b.n	8002b96 <UART_SetConfig+0x342>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	77fb      	strb	r3, [r7, #31]
 8002b82:	e00e      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b84:	2302      	movs	r3, #2
 8002b86:	77fb      	strb	r3, [r7, #31]
 8002b88:	e00b      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b8a:	2304      	movs	r3, #4
 8002b8c:	77fb      	strb	r3, [r7, #31]
 8002b8e:	e008      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b90:	2308      	movs	r3, #8
 8002b92:	77fb      	strb	r3, [r7, #31]
 8002b94:	e005      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b96:	2310      	movs	r3, #16
 8002b98:	77fb      	strb	r3, [r7, #31]
 8002b9a:	bf00      	nop
 8002b9c:	e001      	b.n	8002ba2 <UART_SetConfig+0x34e>
 8002b9e:	2310      	movs	r3, #16
 8002ba0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002baa:	d17f      	bne.n	8002cac <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002bac:	7ffb      	ldrb	r3, [r7, #31]
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d85c      	bhi.n	8002c6c <UART_SetConfig+0x418>
 8002bb2:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <UART_SetConfig+0x364>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002bdd 	.word	0x08002bdd
 8002bbc:	08002bfd 	.word	0x08002bfd
 8002bc0:	08002c1d 	.word	0x08002c1d
 8002bc4:	08002c6d 	.word	0x08002c6d
 8002bc8:	08002c35 	.word	0x08002c35
 8002bcc:	08002c6d 	.word	0x08002c6d
 8002bd0:	08002c6d 	.word	0x08002c6d
 8002bd4:	08002c6d 	.word	0x08002c6d
 8002bd8:	08002c55 	.word	0x08002c55
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bdc:	f7ff f838 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002be0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	005a      	lsls	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	441a      	add	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	61bb      	str	r3, [r7, #24]
        break;
 8002bfa:	e03a      	b.n	8002c72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bfc:	f7ff f83c 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8002c00:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	005a      	lsls	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	441a      	add	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	61bb      	str	r3, [r7, #24]
        break;
 8002c1a:	e02a      	b.n	8002c72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	085a      	lsrs	r2, r3, #1
 8002c22:	4b5f      	ldr	r3, [pc, #380]	; (8002da0 <UART_SetConfig+0x54c>)
 8002c24:	4413      	add	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6852      	ldr	r2, [r2, #4]
 8002c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	61bb      	str	r3, [r7, #24]
        break;
 8002c32:	e01e      	b.n	8002c72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c34:	f7fe ff4e 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8002c38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	005a      	lsls	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	085b      	lsrs	r3, r3, #1
 8002c44:	441a      	add	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	61bb      	str	r3, [r7, #24]
        break;
 8002c52:	e00e      	b.n	8002c72 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	61bb      	str	r3, [r7, #24]
        break;
 8002c6a:	e002      	b.n	8002c72 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	75fb      	strb	r3, [r7, #23]
        break;
 8002c70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b0f      	cmp	r3, #15
 8002c76:	d916      	bls.n	8002ca6 <UART_SetConfig+0x452>
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d212      	bcs.n	8002ca6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f023 030f 	bic.w	r3, r3, #15
 8002c88:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	897b      	ldrh	r3, [r7, #10]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	897a      	ldrh	r2, [r7, #10]
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	e070      	b.n	8002d88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
 8002caa:	e06d      	b.n	8002d88 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d859      	bhi.n	8002d66 <UART_SetConfig+0x512>
 8002cb2:	a201      	add	r2, pc, #4	; (adr r2, 8002cb8 <UART_SetConfig+0x464>)
 8002cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb8:	08002cdd 	.word	0x08002cdd
 8002cbc:	08002cfb 	.word	0x08002cfb
 8002cc0:	08002d19 	.word	0x08002d19
 8002cc4:	08002d67 	.word	0x08002d67
 8002cc8:	08002d31 	.word	0x08002d31
 8002ccc:	08002d67 	.word	0x08002d67
 8002cd0:	08002d67 	.word	0x08002d67
 8002cd4:	08002d67 	.word	0x08002d67
 8002cd8:	08002d4f 	.word	0x08002d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cdc:	f7fe ffb8 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8002ce0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	085a      	lsrs	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	441a      	add	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	61bb      	str	r3, [r7, #24]
        break;
 8002cf8:	e038      	b.n	8002d6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cfa:	f7fe ffbd 	bl	8001c78 <HAL_RCC_GetPCLK2Freq>
 8002cfe:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	085a      	lsrs	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	61bb      	str	r3, [r7, #24]
        break;
 8002d16:	e029      	b.n	8002d6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	085a      	lsrs	r2, r3, #1
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <UART_SetConfig+0x550>)
 8002d20:	4413      	add	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6852      	ldr	r2, [r2, #4]
 8002d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	61bb      	str	r3, [r7, #24]
        break;
 8002d2e:	e01d      	b.n	8002d6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d30:	f7fe fed0 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8002d34:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	085a      	lsrs	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	441a      	add	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	61bb      	str	r3, [r7, #24]
        break;
 8002d4c:	e00e      	b.n	8002d6c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	61bb      	str	r3, [r7, #24]
        break;
 8002d64:	e002      	b.n	8002d6c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
        break;
 8002d6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	d908      	bls.n	8002d84 <UART_SetConfig+0x530>
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d204      	bcs.n	8002d84 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	e001      	b.n	8002d88 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	01e84800 	.word	0x01e84800
 8002da4:	00f42400 	.word	0x00f42400

08002da8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00a      	beq.n	8002e16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01a      	beq.n	8002ebe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea6:	d10a      	bne.n	8002ebe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002efa:	f7fd ff31 	bl	8000d60 <HAL_GetTick>
 8002efe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d10e      	bne.n	8002f2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f814 	bl	8002f4a <UART_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e00a      	b.n	8002f42 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2220      	movs	r2, #32
 8002f36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4613      	mov	r3, r2
 8002f58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5a:	e05d      	b.n	8003018 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f62:	d059      	beq.n	8003018 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f64:	f7fd fefc 	bl	8000d60 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d302      	bcc.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11b      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e042      	b.n	8003038 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d02b      	beq.n	8003018 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fce:	d123      	bne.n	8003018 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fd8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fe8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e00f      	b.n	8003038 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	429a      	cmp	r2, r3
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	429a      	cmp	r2, r3
 8003034:	d092      	beq.n	8002f5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003056:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7ff fbce 	bl	8002840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030a4:	bf00      	nop
 80030a6:	3710      	adds	r7, #16
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b8:	2b21      	cmp	r3, #33	; 0x21
 80030ba:	d12a      	bne.n	8003112 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d110      	bne.n	80030ea <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80030e8:	e013      	b.n	8003112 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	781a      	ldrb	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312a:	2b21      	cmp	r3, #33	; 0x21
 800312c:	d12f      	bne.n	800318e <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d110      	bne.n	800315c <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003148:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003158:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800315a:	e018      	b.n	800318e <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003160:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003170:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	1c9a      	adds	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800318e:	bf00      	nop
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fb34 	bl	800282c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031da:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e0:	2b22      	cmp	r3, #34	; 0x22
 80031e2:	d13a      	bne.n	800325a <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031ec:	89bb      	ldrh	r3, [r7, #12]
 80031ee:	b2d9      	uxtb	r1, r3
 80031f0:	89fb      	ldrh	r3, [r7, #14]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f8:	400a      	ands	r2, r1
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d121      	bne.n	800326a <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003234:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd fb5a 	bl	800090c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003258:	e007      	b.n	800326a <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0208 	orr.w	r2, r2, #8
 8003268:	619a      	str	r2, [r3, #24]
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003280:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003286:	2b22      	cmp	r3, #34	; 0x22
 8003288:	d13a      	bne.n	8003300 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003298:	89ba      	ldrh	r2, [r7, #12]
 800329a:	89fb      	ldrh	r3, [r7, #14]
 800329c:	4013      	ands	r3, r2
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d121      	bne.n	8003310 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032da:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7fd fb07 	bl	800090c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032fe:	e007      	b.n	8003310 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0208 	orr.w	r2, r2, #8
 800330e:	619a      	str	r2, [r3, #24]
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <__errno>:
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <__errno+0x8>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000070 	.word	0x20000070

08003324 <__libc_init_array>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	4e0d      	ldr	r6, [pc, #52]	; (800335c <__libc_init_array+0x38>)
 8003328:	4c0d      	ldr	r4, [pc, #52]	; (8003360 <__libc_init_array+0x3c>)
 800332a:	1ba4      	subs	r4, r4, r6
 800332c:	10a4      	asrs	r4, r4, #2
 800332e:	2500      	movs	r5, #0
 8003330:	42a5      	cmp	r5, r4
 8003332:	d109      	bne.n	8003348 <__libc_init_array+0x24>
 8003334:	4e0b      	ldr	r6, [pc, #44]	; (8003364 <__libc_init_array+0x40>)
 8003336:	4c0c      	ldr	r4, [pc, #48]	; (8003368 <__libc_init_array+0x44>)
 8003338:	f000 ff2e 	bl	8004198 <_init>
 800333c:	1ba4      	subs	r4, r4, r6
 800333e:	10a4      	asrs	r4, r4, #2
 8003340:	2500      	movs	r5, #0
 8003342:	42a5      	cmp	r5, r4
 8003344:	d105      	bne.n	8003352 <__libc_init_array+0x2e>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800334c:	4798      	blx	r3
 800334e:	3501      	adds	r5, #1
 8003350:	e7ee      	b.n	8003330 <__libc_init_array+0xc>
 8003352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003356:	4798      	blx	r3
 8003358:	3501      	adds	r5, #1
 800335a:	e7f2      	b.n	8003342 <__libc_init_array+0x1e>
 800335c:	08004374 	.word	0x08004374
 8003360:	08004374 	.word	0x08004374
 8003364:	08004374 	.word	0x08004374
 8003368:	08004378 	.word	0x08004378

0800336c <memset>:
 800336c:	4402      	add	r2, r0
 800336e:	4603      	mov	r3, r0
 8003370:	4293      	cmp	r3, r2
 8003372:	d100      	bne.n	8003376 <memset+0xa>
 8003374:	4770      	bx	lr
 8003376:	f803 1b01 	strb.w	r1, [r3], #1
 800337a:	e7f9      	b.n	8003370 <memset+0x4>

0800337c <iprintf>:
 800337c:	b40f      	push	{r0, r1, r2, r3}
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <iprintf+0x2c>)
 8003380:	b513      	push	{r0, r1, r4, lr}
 8003382:	681c      	ldr	r4, [r3, #0]
 8003384:	b124      	cbz	r4, 8003390 <iprintf+0x14>
 8003386:	69a3      	ldr	r3, [r4, #24]
 8003388:	b913      	cbnz	r3, 8003390 <iprintf+0x14>
 800338a:	4620      	mov	r0, r4
 800338c:	f000 f878 	bl	8003480 <__sinit>
 8003390:	ab05      	add	r3, sp, #20
 8003392:	9a04      	ldr	r2, [sp, #16]
 8003394:	68a1      	ldr	r1, [r4, #8]
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	4620      	mov	r0, r4
 800339a:	f000 f97f 	bl	800369c <_vfiprintf_r>
 800339e:	b002      	add	sp, #8
 80033a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a4:	b004      	add	sp, #16
 80033a6:	4770      	bx	lr
 80033a8:	20000070 	.word	0x20000070

080033ac <strcat>:
 80033ac:	b510      	push	{r4, lr}
 80033ae:	4603      	mov	r3, r0
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	1c5c      	adds	r4, r3, #1
 80033b4:	b93a      	cbnz	r2, 80033c6 <strcat+0x1a>
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	d1f9      	bne.n	80033b8 <strcat+0xc>
 80033c4:	bd10      	pop	{r4, pc}
 80033c6:	4623      	mov	r3, r4
 80033c8:	e7f2      	b.n	80033b0 <strcat+0x4>

080033ca <strstr>:
 80033ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033cc:	7803      	ldrb	r3, [r0, #0]
 80033ce:	b17b      	cbz	r3, 80033f0 <strstr+0x26>
 80033d0:	4604      	mov	r4, r0
 80033d2:	7823      	ldrb	r3, [r4, #0]
 80033d4:	4620      	mov	r0, r4
 80033d6:	1c66      	adds	r6, r4, #1
 80033d8:	b17b      	cbz	r3, 80033fa <strstr+0x30>
 80033da:	1e4a      	subs	r2, r1, #1
 80033dc:	1e63      	subs	r3, r4, #1
 80033de:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80033e2:	b14d      	cbz	r5, 80033f8 <strstr+0x2e>
 80033e4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80033e8:	42af      	cmp	r7, r5
 80033ea:	4634      	mov	r4, r6
 80033ec:	d0f7      	beq.n	80033de <strstr+0x14>
 80033ee:	e7f0      	b.n	80033d2 <strstr+0x8>
 80033f0:	780b      	ldrb	r3, [r1, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf18      	it	ne
 80033f6:	2000      	movne	r0, #0
 80033f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033fa:	4618      	mov	r0, r3
 80033fc:	e7fc      	b.n	80033f8 <strstr+0x2e>
	...

08003400 <std>:
 8003400:	2300      	movs	r3, #0
 8003402:	b510      	push	{r4, lr}
 8003404:	4604      	mov	r4, r0
 8003406:	e9c0 3300 	strd	r3, r3, [r0]
 800340a:	6083      	str	r3, [r0, #8]
 800340c:	8181      	strh	r1, [r0, #12]
 800340e:	6643      	str	r3, [r0, #100]	; 0x64
 8003410:	81c2      	strh	r2, [r0, #14]
 8003412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003416:	6183      	str	r3, [r0, #24]
 8003418:	4619      	mov	r1, r3
 800341a:	2208      	movs	r2, #8
 800341c:	305c      	adds	r0, #92	; 0x5c
 800341e:	f7ff ffa5 	bl	800336c <memset>
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <std+0x38>)
 8003424:	6263      	str	r3, [r4, #36]	; 0x24
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <std+0x3c>)
 8003428:	62a3      	str	r3, [r4, #40]	; 0x28
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <std+0x40>)
 800342c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <std+0x44>)
 8003430:	6224      	str	r4, [r4, #32]
 8003432:	6323      	str	r3, [r4, #48]	; 0x30
 8003434:	bd10      	pop	{r4, pc}
 8003436:	bf00      	nop
 8003438:	08003bf9 	.word	0x08003bf9
 800343c:	08003c1b 	.word	0x08003c1b
 8003440:	08003c53 	.word	0x08003c53
 8003444:	08003c77 	.word	0x08003c77

08003448 <_cleanup_r>:
 8003448:	4901      	ldr	r1, [pc, #4]	; (8003450 <_cleanup_r+0x8>)
 800344a:	f000 b885 	b.w	8003558 <_fwalk_reent>
 800344e:	bf00      	nop
 8003450:	08003f51 	.word	0x08003f51

08003454 <__sfmoreglue>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	1e4a      	subs	r2, r1, #1
 8003458:	2568      	movs	r5, #104	; 0x68
 800345a:	4355      	muls	r5, r2
 800345c:	460e      	mov	r6, r1
 800345e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003462:	f000 f897 	bl	8003594 <_malloc_r>
 8003466:	4604      	mov	r4, r0
 8003468:	b140      	cbz	r0, 800347c <__sfmoreglue+0x28>
 800346a:	2100      	movs	r1, #0
 800346c:	e9c0 1600 	strd	r1, r6, [r0]
 8003470:	300c      	adds	r0, #12
 8003472:	60a0      	str	r0, [r4, #8]
 8003474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003478:	f7ff ff78 	bl	800336c <memset>
 800347c:	4620      	mov	r0, r4
 800347e:	bd70      	pop	{r4, r5, r6, pc}

08003480 <__sinit>:
 8003480:	6983      	ldr	r3, [r0, #24]
 8003482:	b510      	push	{r4, lr}
 8003484:	4604      	mov	r4, r0
 8003486:	bb33      	cbnz	r3, 80034d6 <__sinit+0x56>
 8003488:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800348c:	6503      	str	r3, [r0, #80]	; 0x50
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <__sinit+0x58>)
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <__sinit+0x5c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6282      	str	r2, [r0, #40]	; 0x28
 8003496:	4298      	cmp	r0, r3
 8003498:	bf04      	itt	eq
 800349a:	2301      	moveq	r3, #1
 800349c:	6183      	streq	r3, [r0, #24]
 800349e:	f000 f81f 	bl	80034e0 <__sfp>
 80034a2:	6060      	str	r0, [r4, #4]
 80034a4:	4620      	mov	r0, r4
 80034a6:	f000 f81b 	bl	80034e0 <__sfp>
 80034aa:	60a0      	str	r0, [r4, #8]
 80034ac:	4620      	mov	r0, r4
 80034ae:	f000 f817 	bl	80034e0 <__sfp>
 80034b2:	2200      	movs	r2, #0
 80034b4:	60e0      	str	r0, [r4, #12]
 80034b6:	2104      	movs	r1, #4
 80034b8:	6860      	ldr	r0, [r4, #4]
 80034ba:	f7ff ffa1 	bl	8003400 <std>
 80034be:	2201      	movs	r2, #1
 80034c0:	2109      	movs	r1, #9
 80034c2:	68a0      	ldr	r0, [r4, #8]
 80034c4:	f7ff ff9c 	bl	8003400 <std>
 80034c8:	2202      	movs	r2, #2
 80034ca:	2112      	movs	r1, #18
 80034cc:	68e0      	ldr	r0, [r4, #12]
 80034ce:	f7ff ff97 	bl	8003400 <std>
 80034d2:	2301      	movs	r3, #1
 80034d4:	61a3      	str	r3, [r4, #24]
 80034d6:	bd10      	pop	{r4, pc}
 80034d8:	080042d4 	.word	0x080042d4
 80034dc:	08003449 	.word	0x08003449

080034e0 <__sfp>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <__sfp+0x70>)
 80034e4:	681e      	ldr	r6, [r3, #0]
 80034e6:	69b3      	ldr	r3, [r6, #24]
 80034e8:	4607      	mov	r7, r0
 80034ea:	b913      	cbnz	r3, 80034f2 <__sfp+0x12>
 80034ec:	4630      	mov	r0, r6
 80034ee:	f7ff ffc7 	bl	8003480 <__sinit>
 80034f2:	3648      	adds	r6, #72	; 0x48
 80034f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	d503      	bpl.n	8003504 <__sfp+0x24>
 80034fc:	6833      	ldr	r3, [r6, #0]
 80034fe:	b133      	cbz	r3, 800350e <__sfp+0x2e>
 8003500:	6836      	ldr	r6, [r6, #0]
 8003502:	e7f7      	b.n	80034f4 <__sfp+0x14>
 8003504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003508:	b16d      	cbz	r5, 8003526 <__sfp+0x46>
 800350a:	3468      	adds	r4, #104	; 0x68
 800350c:	e7f4      	b.n	80034f8 <__sfp+0x18>
 800350e:	2104      	movs	r1, #4
 8003510:	4638      	mov	r0, r7
 8003512:	f7ff ff9f 	bl	8003454 <__sfmoreglue>
 8003516:	6030      	str	r0, [r6, #0]
 8003518:	2800      	cmp	r0, #0
 800351a:	d1f1      	bne.n	8003500 <__sfp+0x20>
 800351c:	230c      	movs	r3, #12
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4604      	mov	r4, r0
 8003522:	4620      	mov	r0, r4
 8003524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <__sfp+0x74>)
 8003528:	6665      	str	r5, [r4, #100]	; 0x64
 800352a:	e9c4 5500 	strd	r5, r5, [r4]
 800352e:	60a5      	str	r5, [r4, #8]
 8003530:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003534:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003538:	2208      	movs	r2, #8
 800353a:	4629      	mov	r1, r5
 800353c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003540:	f7ff ff14 	bl	800336c <memset>
 8003544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800354c:	e7e9      	b.n	8003522 <__sfp+0x42>
 800354e:	bf00      	nop
 8003550:	080042d4 	.word	0x080042d4
 8003554:	ffff0001 	.word	0xffff0001

08003558 <_fwalk_reent>:
 8003558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800355c:	4680      	mov	r8, r0
 800355e:	4689      	mov	r9, r1
 8003560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003564:	2600      	movs	r6, #0
 8003566:	b914      	cbnz	r4, 800356e <_fwalk_reent+0x16>
 8003568:	4630      	mov	r0, r6
 800356a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800356e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003572:	3f01      	subs	r7, #1
 8003574:	d501      	bpl.n	800357a <_fwalk_reent+0x22>
 8003576:	6824      	ldr	r4, [r4, #0]
 8003578:	e7f5      	b.n	8003566 <_fwalk_reent+0xe>
 800357a:	89ab      	ldrh	r3, [r5, #12]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d907      	bls.n	8003590 <_fwalk_reent+0x38>
 8003580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003584:	3301      	adds	r3, #1
 8003586:	d003      	beq.n	8003590 <_fwalk_reent+0x38>
 8003588:	4629      	mov	r1, r5
 800358a:	4640      	mov	r0, r8
 800358c:	47c8      	blx	r9
 800358e:	4306      	orrs	r6, r0
 8003590:	3568      	adds	r5, #104	; 0x68
 8003592:	e7ee      	b.n	8003572 <_fwalk_reent+0x1a>

08003594 <_malloc_r>:
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	1ccd      	adds	r5, r1, #3
 8003598:	f025 0503 	bic.w	r5, r5, #3
 800359c:	3508      	adds	r5, #8
 800359e:	2d0c      	cmp	r5, #12
 80035a0:	bf38      	it	cc
 80035a2:	250c      	movcc	r5, #12
 80035a4:	2d00      	cmp	r5, #0
 80035a6:	4606      	mov	r6, r0
 80035a8:	db01      	blt.n	80035ae <_malloc_r+0x1a>
 80035aa:	42a9      	cmp	r1, r5
 80035ac:	d903      	bls.n	80035b6 <_malloc_r+0x22>
 80035ae:	230c      	movs	r3, #12
 80035b0:	6033      	str	r3, [r6, #0]
 80035b2:	2000      	movs	r0, #0
 80035b4:	bd70      	pop	{r4, r5, r6, pc}
 80035b6:	f000 fd6b 	bl	8004090 <__malloc_lock>
 80035ba:	4a21      	ldr	r2, [pc, #132]	; (8003640 <_malloc_r+0xac>)
 80035bc:	6814      	ldr	r4, [r2, #0]
 80035be:	4621      	mov	r1, r4
 80035c0:	b991      	cbnz	r1, 80035e8 <_malloc_r+0x54>
 80035c2:	4c20      	ldr	r4, [pc, #128]	; (8003644 <_malloc_r+0xb0>)
 80035c4:	6823      	ldr	r3, [r4, #0]
 80035c6:	b91b      	cbnz	r3, 80035d0 <_malloc_r+0x3c>
 80035c8:	4630      	mov	r0, r6
 80035ca:	f000 fb05 	bl	8003bd8 <_sbrk_r>
 80035ce:	6020      	str	r0, [r4, #0]
 80035d0:	4629      	mov	r1, r5
 80035d2:	4630      	mov	r0, r6
 80035d4:	f000 fb00 	bl	8003bd8 <_sbrk_r>
 80035d8:	1c43      	adds	r3, r0, #1
 80035da:	d124      	bne.n	8003626 <_malloc_r+0x92>
 80035dc:	230c      	movs	r3, #12
 80035de:	6033      	str	r3, [r6, #0]
 80035e0:	4630      	mov	r0, r6
 80035e2:	f000 fd56 	bl	8004092 <__malloc_unlock>
 80035e6:	e7e4      	b.n	80035b2 <_malloc_r+0x1e>
 80035e8:	680b      	ldr	r3, [r1, #0]
 80035ea:	1b5b      	subs	r3, r3, r5
 80035ec:	d418      	bmi.n	8003620 <_malloc_r+0x8c>
 80035ee:	2b0b      	cmp	r3, #11
 80035f0:	d90f      	bls.n	8003612 <_malloc_r+0x7e>
 80035f2:	600b      	str	r3, [r1, #0]
 80035f4:	50cd      	str	r5, [r1, r3]
 80035f6:	18cc      	adds	r4, r1, r3
 80035f8:	4630      	mov	r0, r6
 80035fa:	f000 fd4a 	bl	8004092 <__malloc_unlock>
 80035fe:	f104 000b 	add.w	r0, r4, #11
 8003602:	1d23      	adds	r3, r4, #4
 8003604:	f020 0007 	bic.w	r0, r0, #7
 8003608:	1ac3      	subs	r3, r0, r3
 800360a:	d0d3      	beq.n	80035b4 <_malloc_r+0x20>
 800360c:	425a      	negs	r2, r3
 800360e:	50e2      	str	r2, [r4, r3]
 8003610:	e7d0      	b.n	80035b4 <_malloc_r+0x20>
 8003612:	428c      	cmp	r4, r1
 8003614:	684b      	ldr	r3, [r1, #4]
 8003616:	bf16      	itet	ne
 8003618:	6063      	strne	r3, [r4, #4]
 800361a:	6013      	streq	r3, [r2, #0]
 800361c:	460c      	movne	r4, r1
 800361e:	e7eb      	b.n	80035f8 <_malloc_r+0x64>
 8003620:	460c      	mov	r4, r1
 8003622:	6849      	ldr	r1, [r1, #4]
 8003624:	e7cc      	b.n	80035c0 <_malloc_r+0x2c>
 8003626:	1cc4      	adds	r4, r0, #3
 8003628:	f024 0403 	bic.w	r4, r4, #3
 800362c:	42a0      	cmp	r0, r4
 800362e:	d005      	beq.n	800363c <_malloc_r+0xa8>
 8003630:	1a21      	subs	r1, r4, r0
 8003632:	4630      	mov	r0, r6
 8003634:	f000 fad0 	bl	8003bd8 <_sbrk_r>
 8003638:	3001      	adds	r0, #1
 800363a:	d0cf      	beq.n	80035dc <_malloc_r+0x48>
 800363c:	6025      	str	r5, [r4, #0]
 800363e:	e7db      	b.n	80035f8 <_malloc_r+0x64>
 8003640:	200000f8 	.word	0x200000f8
 8003644:	200000fc 	.word	0x200000fc

08003648 <__sfputc_r>:
 8003648:	6893      	ldr	r3, [r2, #8]
 800364a:	3b01      	subs	r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	b410      	push	{r4}
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	da08      	bge.n	8003666 <__sfputc_r+0x1e>
 8003654:	6994      	ldr	r4, [r2, #24]
 8003656:	42a3      	cmp	r3, r4
 8003658:	db01      	blt.n	800365e <__sfputc_r+0x16>
 800365a:	290a      	cmp	r1, #10
 800365c:	d103      	bne.n	8003666 <__sfputc_r+0x1e>
 800365e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003662:	f000 bb0d 	b.w	8003c80 <__swbuf_r>
 8003666:	6813      	ldr	r3, [r2, #0]
 8003668:	1c58      	adds	r0, r3, #1
 800366a:	6010      	str	r0, [r2, #0]
 800366c:	7019      	strb	r1, [r3, #0]
 800366e:	4608      	mov	r0, r1
 8003670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003674:	4770      	bx	lr

08003676 <__sfputs_r>:
 8003676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003678:	4606      	mov	r6, r0
 800367a:	460f      	mov	r7, r1
 800367c:	4614      	mov	r4, r2
 800367e:	18d5      	adds	r5, r2, r3
 8003680:	42ac      	cmp	r4, r5
 8003682:	d101      	bne.n	8003688 <__sfputs_r+0x12>
 8003684:	2000      	movs	r0, #0
 8003686:	e007      	b.n	8003698 <__sfputs_r+0x22>
 8003688:	463a      	mov	r2, r7
 800368a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800368e:	4630      	mov	r0, r6
 8003690:	f7ff ffda 	bl	8003648 <__sfputc_r>
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	d1f3      	bne.n	8003680 <__sfputs_r+0xa>
 8003698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800369c <_vfiprintf_r>:
 800369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a0:	460c      	mov	r4, r1
 80036a2:	b09d      	sub	sp, #116	; 0x74
 80036a4:	4617      	mov	r7, r2
 80036a6:	461d      	mov	r5, r3
 80036a8:	4606      	mov	r6, r0
 80036aa:	b118      	cbz	r0, 80036b4 <_vfiprintf_r+0x18>
 80036ac:	6983      	ldr	r3, [r0, #24]
 80036ae:	b90b      	cbnz	r3, 80036b4 <_vfiprintf_r+0x18>
 80036b0:	f7ff fee6 	bl	8003480 <__sinit>
 80036b4:	4b7c      	ldr	r3, [pc, #496]	; (80038a8 <_vfiprintf_r+0x20c>)
 80036b6:	429c      	cmp	r4, r3
 80036b8:	d158      	bne.n	800376c <_vfiprintf_r+0xd0>
 80036ba:	6874      	ldr	r4, [r6, #4]
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	0718      	lsls	r0, r3, #28
 80036c0:	d55e      	bpl.n	8003780 <_vfiprintf_r+0xe4>
 80036c2:	6923      	ldr	r3, [r4, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d05b      	beq.n	8003780 <_vfiprintf_r+0xe4>
 80036c8:	2300      	movs	r3, #0
 80036ca:	9309      	str	r3, [sp, #36]	; 0x24
 80036cc:	2320      	movs	r3, #32
 80036ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036d2:	2330      	movs	r3, #48	; 0x30
 80036d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036d8:	9503      	str	r5, [sp, #12]
 80036da:	f04f 0b01 	mov.w	fp, #1
 80036de:	46b8      	mov	r8, r7
 80036e0:	4645      	mov	r5, r8
 80036e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80036e6:	b10b      	cbz	r3, 80036ec <_vfiprintf_r+0x50>
 80036e8:	2b25      	cmp	r3, #37	; 0x25
 80036ea:	d154      	bne.n	8003796 <_vfiprintf_r+0xfa>
 80036ec:	ebb8 0a07 	subs.w	sl, r8, r7
 80036f0:	d00b      	beq.n	800370a <_vfiprintf_r+0x6e>
 80036f2:	4653      	mov	r3, sl
 80036f4:	463a      	mov	r2, r7
 80036f6:	4621      	mov	r1, r4
 80036f8:	4630      	mov	r0, r6
 80036fa:	f7ff ffbc 	bl	8003676 <__sfputs_r>
 80036fe:	3001      	adds	r0, #1
 8003700:	f000 80c2 	beq.w	8003888 <_vfiprintf_r+0x1ec>
 8003704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003706:	4453      	add	r3, sl
 8003708:	9309      	str	r3, [sp, #36]	; 0x24
 800370a:	f898 3000 	ldrb.w	r3, [r8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 80ba 	beq.w	8003888 <_vfiprintf_r+0x1ec>
 8003714:	2300      	movs	r3, #0
 8003716:	f04f 32ff 	mov.w	r2, #4294967295
 800371a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800371e:	9304      	str	r3, [sp, #16]
 8003720:	9307      	str	r3, [sp, #28]
 8003722:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003726:	931a      	str	r3, [sp, #104]	; 0x68
 8003728:	46a8      	mov	r8, r5
 800372a:	2205      	movs	r2, #5
 800372c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003730:	485e      	ldr	r0, [pc, #376]	; (80038ac <_vfiprintf_r+0x210>)
 8003732:	f7fc fd75 	bl	8000220 <memchr>
 8003736:	9b04      	ldr	r3, [sp, #16]
 8003738:	bb78      	cbnz	r0, 800379a <_vfiprintf_r+0xfe>
 800373a:	06d9      	lsls	r1, r3, #27
 800373c:	bf44      	itt	mi
 800373e:	2220      	movmi	r2, #32
 8003740:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003744:	071a      	lsls	r2, r3, #28
 8003746:	bf44      	itt	mi
 8003748:	222b      	movmi	r2, #43	; 0x2b
 800374a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800374e:	782a      	ldrb	r2, [r5, #0]
 8003750:	2a2a      	cmp	r2, #42	; 0x2a
 8003752:	d02a      	beq.n	80037aa <_vfiprintf_r+0x10e>
 8003754:	9a07      	ldr	r2, [sp, #28]
 8003756:	46a8      	mov	r8, r5
 8003758:	2000      	movs	r0, #0
 800375a:	250a      	movs	r5, #10
 800375c:	4641      	mov	r1, r8
 800375e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003762:	3b30      	subs	r3, #48	; 0x30
 8003764:	2b09      	cmp	r3, #9
 8003766:	d969      	bls.n	800383c <_vfiprintf_r+0x1a0>
 8003768:	b360      	cbz	r0, 80037c4 <_vfiprintf_r+0x128>
 800376a:	e024      	b.n	80037b6 <_vfiprintf_r+0x11a>
 800376c:	4b50      	ldr	r3, [pc, #320]	; (80038b0 <_vfiprintf_r+0x214>)
 800376e:	429c      	cmp	r4, r3
 8003770:	d101      	bne.n	8003776 <_vfiprintf_r+0xda>
 8003772:	68b4      	ldr	r4, [r6, #8]
 8003774:	e7a2      	b.n	80036bc <_vfiprintf_r+0x20>
 8003776:	4b4f      	ldr	r3, [pc, #316]	; (80038b4 <_vfiprintf_r+0x218>)
 8003778:	429c      	cmp	r4, r3
 800377a:	bf08      	it	eq
 800377c:	68f4      	ldreq	r4, [r6, #12]
 800377e:	e79d      	b.n	80036bc <_vfiprintf_r+0x20>
 8003780:	4621      	mov	r1, r4
 8003782:	4630      	mov	r0, r6
 8003784:	f000 fae0 	bl	8003d48 <__swsetup_r>
 8003788:	2800      	cmp	r0, #0
 800378a:	d09d      	beq.n	80036c8 <_vfiprintf_r+0x2c>
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	b01d      	add	sp, #116	; 0x74
 8003792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003796:	46a8      	mov	r8, r5
 8003798:	e7a2      	b.n	80036e0 <_vfiprintf_r+0x44>
 800379a:	4a44      	ldr	r2, [pc, #272]	; (80038ac <_vfiprintf_r+0x210>)
 800379c:	1a80      	subs	r0, r0, r2
 800379e:	fa0b f000 	lsl.w	r0, fp, r0
 80037a2:	4318      	orrs	r0, r3
 80037a4:	9004      	str	r0, [sp, #16]
 80037a6:	4645      	mov	r5, r8
 80037a8:	e7be      	b.n	8003728 <_vfiprintf_r+0x8c>
 80037aa:	9a03      	ldr	r2, [sp, #12]
 80037ac:	1d11      	adds	r1, r2, #4
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	9103      	str	r1, [sp, #12]
 80037b2:	2a00      	cmp	r2, #0
 80037b4:	db01      	blt.n	80037ba <_vfiprintf_r+0x11e>
 80037b6:	9207      	str	r2, [sp, #28]
 80037b8:	e004      	b.n	80037c4 <_vfiprintf_r+0x128>
 80037ba:	4252      	negs	r2, r2
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	9207      	str	r2, [sp, #28]
 80037c2:	9304      	str	r3, [sp, #16]
 80037c4:	f898 3000 	ldrb.w	r3, [r8]
 80037c8:	2b2e      	cmp	r3, #46	; 0x2e
 80037ca:	d10e      	bne.n	80037ea <_vfiprintf_r+0x14e>
 80037cc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80037d0:	2b2a      	cmp	r3, #42	; 0x2a
 80037d2:	d138      	bne.n	8003846 <_vfiprintf_r+0x1aa>
 80037d4:	9b03      	ldr	r3, [sp, #12]
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	9203      	str	r2, [sp, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bfb8      	it	lt
 80037e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80037e4:	f108 0802 	add.w	r8, r8, #2
 80037e8:	9305      	str	r3, [sp, #20]
 80037ea:	4d33      	ldr	r5, [pc, #204]	; (80038b8 <_vfiprintf_r+0x21c>)
 80037ec:	f898 1000 	ldrb.w	r1, [r8]
 80037f0:	2203      	movs	r2, #3
 80037f2:	4628      	mov	r0, r5
 80037f4:	f7fc fd14 	bl	8000220 <memchr>
 80037f8:	b140      	cbz	r0, 800380c <_vfiprintf_r+0x170>
 80037fa:	2340      	movs	r3, #64	; 0x40
 80037fc:	1b40      	subs	r0, r0, r5
 80037fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003802:	9b04      	ldr	r3, [sp, #16]
 8003804:	4303      	orrs	r3, r0
 8003806:	f108 0801 	add.w	r8, r8, #1
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	f898 1000 	ldrb.w	r1, [r8]
 8003810:	482a      	ldr	r0, [pc, #168]	; (80038bc <_vfiprintf_r+0x220>)
 8003812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003816:	2206      	movs	r2, #6
 8003818:	f108 0701 	add.w	r7, r8, #1
 800381c:	f7fc fd00 	bl	8000220 <memchr>
 8003820:	2800      	cmp	r0, #0
 8003822:	d037      	beq.n	8003894 <_vfiprintf_r+0x1f8>
 8003824:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <_vfiprintf_r+0x224>)
 8003826:	bb1b      	cbnz	r3, 8003870 <_vfiprintf_r+0x1d4>
 8003828:	9b03      	ldr	r3, [sp, #12]
 800382a:	3307      	adds	r3, #7
 800382c:	f023 0307 	bic.w	r3, r3, #7
 8003830:	3308      	adds	r3, #8
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003836:	444b      	add	r3, r9
 8003838:	9309      	str	r3, [sp, #36]	; 0x24
 800383a:	e750      	b.n	80036de <_vfiprintf_r+0x42>
 800383c:	fb05 3202 	mla	r2, r5, r2, r3
 8003840:	2001      	movs	r0, #1
 8003842:	4688      	mov	r8, r1
 8003844:	e78a      	b.n	800375c <_vfiprintf_r+0xc0>
 8003846:	2300      	movs	r3, #0
 8003848:	f108 0801 	add.w	r8, r8, #1
 800384c:	9305      	str	r3, [sp, #20]
 800384e:	4619      	mov	r1, r3
 8003850:	250a      	movs	r5, #10
 8003852:	4640      	mov	r0, r8
 8003854:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003858:	3a30      	subs	r2, #48	; 0x30
 800385a:	2a09      	cmp	r2, #9
 800385c:	d903      	bls.n	8003866 <_vfiprintf_r+0x1ca>
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0c3      	beq.n	80037ea <_vfiprintf_r+0x14e>
 8003862:	9105      	str	r1, [sp, #20]
 8003864:	e7c1      	b.n	80037ea <_vfiprintf_r+0x14e>
 8003866:	fb05 2101 	mla	r1, r5, r1, r2
 800386a:	2301      	movs	r3, #1
 800386c:	4680      	mov	r8, r0
 800386e:	e7f0      	b.n	8003852 <_vfiprintf_r+0x1b6>
 8003870:	ab03      	add	r3, sp, #12
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4622      	mov	r2, r4
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <_vfiprintf_r+0x228>)
 8003878:	a904      	add	r1, sp, #16
 800387a:	4630      	mov	r0, r6
 800387c:	f3af 8000 	nop.w
 8003880:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003884:	4681      	mov	r9, r0
 8003886:	d1d5      	bne.n	8003834 <_vfiprintf_r+0x198>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	065b      	lsls	r3, r3, #25
 800388c:	f53f af7e 	bmi.w	800378c <_vfiprintf_r+0xf0>
 8003890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003892:	e77d      	b.n	8003790 <_vfiprintf_r+0xf4>
 8003894:	ab03      	add	r3, sp, #12
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	4622      	mov	r2, r4
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <_vfiprintf_r+0x228>)
 800389c:	a904      	add	r1, sp, #16
 800389e:	4630      	mov	r0, r6
 80038a0:	f000 f888 	bl	80039b4 <_printf_i>
 80038a4:	e7ec      	b.n	8003880 <_vfiprintf_r+0x1e4>
 80038a6:	bf00      	nop
 80038a8:	080042f8 	.word	0x080042f8
 80038ac:	08004338 	.word	0x08004338
 80038b0:	08004318 	.word	0x08004318
 80038b4:	080042d8 	.word	0x080042d8
 80038b8:	0800433e 	.word	0x0800433e
 80038bc:	08004342 	.word	0x08004342
 80038c0:	00000000 	.word	0x00000000
 80038c4:	08003677 	.word	0x08003677

080038c8 <_printf_common>:
 80038c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038cc:	4691      	mov	r9, r2
 80038ce:	461f      	mov	r7, r3
 80038d0:	688a      	ldr	r2, [r1, #8]
 80038d2:	690b      	ldr	r3, [r1, #16]
 80038d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038d8:	4293      	cmp	r3, r2
 80038da:	bfb8      	it	lt
 80038dc:	4613      	movlt	r3, r2
 80038de:	f8c9 3000 	str.w	r3, [r9]
 80038e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038e6:	4606      	mov	r6, r0
 80038e8:	460c      	mov	r4, r1
 80038ea:	b112      	cbz	r2, 80038f2 <_printf_common+0x2a>
 80038ec:	3301      	adds	r3, #1
 80038ee:	f8c9 3000 	str.w	r3, [r9]
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	0699      	lsls	r1, r3, #26
 80038f6:	bf42      	ittt	mi
 80038f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038fc:	3302      	addmi	r3, #2
 80038fe:	f8c9 3000 	strmi.w	r3, [r9]
 8003902:	6825      	ldr	r5, [r4, #0]
 8003904:	f015 0506 	ands.w	r5, r5, #6
 8003908:	d107      	bne.n	800391a <_printf_common+0x52>
 800390a:	f104 0a19 	add.w	sl, r4, #25
 800390e:	68e3      	ldr	r3, [r4, #12]
 8003910:	f8d9 2000 	ldr.w	r2, [r9]
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	42ab      	cmp	r3, r5
 8003918:	dc28      	bgt.n	800396c <_printf_common+0xa4>
 800391a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800391e:	6822      	ldr	r2, [r4, #0]
 8003920:	3300      	adds	r3, #0
 8003922:	bf18      	it	ne
 8003924:	2301      	movne	r3, #1
 8003926:	0692      	lsls	r2, r2, #26
 8003928:	d42d      	bmi.n	8003986 <_printf_common+0xbe>
 800392a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800392e:	4639      	mov	r1, r7
 8003930:	4630      	mov	r0, r6
 8003932:	47c0      	blx	r8
 8003934:	3001      	adds	r0, #1
 8003936:	d020      	beq.n	800397a <_printf_common+0xb2>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	68e5      	ldr	r5, [r4, #12]
 800393c:	f8d9 2000 	ldr.w	r2, [r9]
 8003940:	f003 0306 	and.w	r3, r3, #6
 8003944:	2b04      	cmp	r3, #4
 8003946:	bf08      	it	eq
 8003948:	1aad      	subeq	r5, r5, r2
 800394a:	68a3      	ldr	r3, [r4, #8]
 800394c:	6922      	ldr	r2, [r4, #16]
 800394e:	bf0c      	ite	eq
 8003950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003954:	2500      	movne	r5, #0
 8003956:	4293      	cmp	r3, r2
 8003958:	bfc4      	itt	gt
 800395a:	1a9b      	subgt	r3, r3, r2
 800395c:	18ed      	addgt	r5, r5, r3
 800395e:	f04f 0900 	mov.w	r9, #0
 8003962:	341a      	adds	r4, #26
 8003964:	454d      	cmp	r5, r9
 8003966:	d11a      	bne.n	800399e <_printf_common+0xd6>
 8003968:	2000      	movs	r0, #0
 800396a:	e008      	b.n	800397e <_printf_common+0xb6>
 800396c:	2301      	movs	r3, #1
 800396e:	4652      	mov	r2, sl
 8003970:	4639      	mov	r1, r7
 8003972:	4630      	mov	r0, r6
 8003974:	47c0      	blx	r8
 8003976:	3001      	adds	r0, #1
 8003978:	d103      	bne.n	8003982 <_printf_common+0xba>
 800397a:	f04f 30ff 	mov.w	r0, #4294967295
 800397e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003982:	3501      	adds	r5, #1
 8003984:	e7c3      	b.n	800390e <_printf_common+0x46>
 8003986:	18e1      	adds	r1, r4, r3
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	2030      	movs	r0, #48	; 0x30
 800398c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003990:	4422      	add	r2, r4
 8003992:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003996:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800399a:	3302      	adds	r3, #2
 800399c:	e7c5      	b.n	800392a <_printf_common+0x62>
 800399e:	2301      	movs	r3, #1
 80039a0:	4622      	mov	r2, r4
 80039a2:	4639      	mov	r1, r7
 80039a4:	4630      	mov	r0, r6
 80039a6:	47c0      	blx	r8
 80039a8:	3001      	adds	r0, #1
 80039aa:	d0e6      	beq.n	800397a <_printf_common+0xb2>
 80039ac:	f109 0901 	add.w	r9, r9, #1
 80039b0:	e7d8      	b.n	8003964 <_printf_common+0x9c>
	...

080039b4 <_printf_i>:
 80039b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80039bc:	460c      	mov	r4, r1
 80039be:	7e09      	ldrb	r1, [r1, #24]
 80039c0:	b085      	sub	sp, #20
 80039c2:	296e      	cmp	r1, #110	; 0x6e
 80039c4:	4617      	mov	r7, r2
 80039c6:	4606      	mov	r6, r0
 80039c8:	4698      	mov	r8, r3
 80039ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80039cc:	f000 80b3 	beq.w	8003b36 <_printf_i+0x182>
 80039d0:	d822      	bhi.n	8003a18 <_printf_i+0x64>
 80039d2:	2963      	cmp	r1, #99	; 0x63
 80039d4:	d036      	beq.n	8003a44 <_printf_i+0x90>
 80039d6:	d80a      	bhi.n	80039ee <_printf_i+0x3a>
 80039d8:	2900      	cmp	r1, #0
 80039da:	f000 80b9 	beq.w	8003b50 <_printf_i+0x19c>
 80039de:	2958      	cmp	r1, #88	; 0x58
 80039e0:	f000 8083 	beq.w	8003aea <_printf_i+0x136>
 80039e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80039ec:	e032      	b.n	8003a54 <_printf_i+0xa0>
 80039ee:	2964      	cmp	r1, #100	; 0x64
 80039f0:	d001      	beq.n	80039f6 <_printf_i+0x42>
 80039f2:	2969      	cmp	r1, #105	; 0x69
 80039f4:	d1f6      	bne.n	80039e4 <_printf_i+0x30>
 80039f6:	6820      	ldr	r0, [r4, #0]
 80039f8:	6813      	ldr	r3, [r2, #0]
 80039fa:	0605      	lsls	r5, r0, #24
 80039fc:	f103 0104 	add.w	r1, r3, #4
 8003a00:	d52a      	bpl.n	8003a58 <_printf_i+0xa4>
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6011      	str	r1, [r2, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	da03      	bge.n	8003a12 <_printf_i+0x5e>
 8003a0a:	222d      	movs	r2, #45	; 0x2d
 8003a0c:	425b      	negs	r3, r3
 8003a0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a12:	486f      	ldr	r0, [pc, #444]	; (8003bd0 <_printf_i+0x21c>)
 8003a14:	220a      	movs	r2, #10
 8003a16:	e039      	b.n	8003a8c <_printf_i+0xd8>
 8003a18:	2973      	cmp	r1, #115	; 0x73
 8003a1a:	f000 809d 	beq.w	8003b58 <_printf_i+0x1a4>
 8003a1e:	d808      	bhi.n	8003a32 <_printf_i+0x7e>
 8003a20:	296f      	cmp	r1, #111	; 0x6f
 8003a22:	d020      	beq.n	8003a66 <_printf_i+0xb2>
 8003a24:	2970      	cmp	r1, #112	; 0x70
 8003a26:	d1dd      	bne.n	80039e4 <_printf_i+0x30>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	f043 0320 	orr.w	r3, r3, #32
 8003a2e:	6023      	str	r3, [r4, #0]
 8003a30:	e003      	b.n	8003a3a <_printf_i+0x86>
 8003a32:	2975      	cmp	r1, #117	; 0x75
 8003a34:	d017      	beq.n	8003a66 <_printf_i+0xb2>
 8003a36:	2978      	cmp	r1, #120	; 0x78
 8003a38:	d1d4      	bne.n	80039e4 <_printf_i+0x30>
 8003a3a:	2378      	movs	r3, #120	; 0x78
 8003a3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a40:	4864      	ldr	r0, [pc, #400]	; (8003bd4 <_printf_i+0x220>)
 8003a42:	e055      	b.n	8003af0 <_printf_i+0x13c>
 8003a44:	6813      	ldr	r3, [r2, #0]
 8003a46:	1d19      	adds	r1, r3, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6011      	str	r1, [r2, #0]
 8003a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a54:	2301      	movs	r3, #1
 8003a56:	e08c      	b.n	8003b72 <_printf_i+0x1be>
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6011      	str	r1, [r2, #0]
 8003a5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a60:	bf18      	it	ne
 8003a62:	b21b      	sxthne	r3, r3
 8003a64:	e7cf      	b.n	8003a06 <_printf_i+0x52>
 8003a66:	6813      	ldr	r3, [r2, #0]
 8003a68:	6825      	ldr	r5, [r4, #0]
 8003a6a:	1d18      	adds	r0, r3, #4
 8003a6c:	6010      	str	r0, [r2, #0]
 8003a6e:	0628      	lsls	r0, r5, #24
 8003a70:	d501      	bpl.n	8003a76 <_printf_i+0xc2>
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	e002      	b.n	8003a7c <_printf_i+0xc8>
 8003a76:	0668      	lsls	r0, r5, #25
 8003a78:	d5fb      	bpl.n	8003a72 <_printf_i+0xbe>
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	4854      	ldr	r0, [pc, #336]	; (8003bd0 <_printf_i+0x21c>)
 8003a7e:	296f      	cmp	r1, #111	; 0x6f
 8003a80:	bf14      	ite	ne
 8003a82:	220a      	movne	r2, #10
 8003a84:	2208      	moveq	r2, #8
 8003a86:	2100      	movs	r1, #0
 8003a88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a8c:	6865      	ldr	r5, [r4, #4]
 8003a8e:	60a5      	str	r5, [r4, #8]
 8003a90:	2d00      	cmp	r5, #0
 8003a92:	f2c0 8095 	blt.w	8003bc0 <_printf_i+0x20c>
 8003a96:	6821      	ldr	r1, [r4, #0]
 8003a98:	f021 0104 	bic.w	r1, r1, #4
 8003a9c:	6021      	str	r1, [r4, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d13d      	bne.n	8003b1e <_printf_i+0x16a>
 8003aa2:	2d00      	cmp	r5, #0
 8003aa4:	f040 808e 	bne.w	8003bc4 <_printf_i+0x210>
 8003aa8:	4665      	mov	r5, ip
 8003aaa:	2a08      	cmp	r2, #8
 8003aac:	d10b      	bne.n	8003ac6 <_printf_i+0x112>
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	07db      	lsls	r3, r3, #31
 8003ab2:	d508      	bpl.n	8003ac6 <_printf_i+0x112>
 8003ab4:	6923      	ldr	r3, [r4, #16]
 8003ab6:	6862      	ldr	r2, [r4, #4]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	bfde      	ittt	le
 8003abc:	2330      	movle	r3, #48	; 0x30
 8003abe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ac2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ac6:	ebac 0305 	sub.w	r3, ip, r5
 8003aca:	6123      	str	r3, [r4, #16]
 8003acc:	f8cd 8000 	str.w	r8, [sp]
 8003ad0:	463b      	mov	r3, r7
 8003ad2:	aa03      	add	r2, sp, #12
 8003ad4:	4621      	mov	r1, r4
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	f7ff fef6 	bl	80038c8 <_printf_common>
 8003adc:	3001      	adds	r0, #1
 8003ade:	d14d      	bne.n	8003b7c <_printf_i+0x1c8>
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	b005      	add	sp, #20
 8003ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003aea:	4839      	ldr	r0, [pc, #228]	; (8003bd0 <_printf_i+0x21c>)
 8003aec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003af0:	6813      	ldr	r3, [r2, #0]
 8003af2:	6821      	ldr	r1, [r4, #0]
 8003af4:	1d1d      	adds	r5, r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6015      	str	r5, [r2, #0]
 8003afa:	060a      	lsls	r2, r1, #24
 8003afc:	d50b      	bpl.n	8003b16 <_printf_i+0x162>
 8003afe:	07ca      	lsls	r2, r1, #31
 8003b00:	bf44      	itt	mi
 8003b02:	f041 0120 	orrmi.w	r1, r1, #32
 8003b06:	6021      	strmi	r1, [r4, #0]
 8003b08:	b91b      	cbnz	r3, 8003b12 <_printf_i+0x15e>
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	f022 0220 	bic.w	r2, r2, #32
 8003b10:	6022      	str	r2, [r4, #0]
 8003b12:	2210      	movs	r2, #16
 8003b14:	e7b7      	b.n	8003a86 <_printf_i+0xd2>
 8003b16:	064d      	lsls	r5, r1, #25
 8003b18:	bf48      	it	mi
 8003b1a:	b29b      	uxthmi	r3, r3
 8003b1c:	e7ef      	b.n	8003afe <_printf_i+0x14a>
 8003b1e:	4665      	mov	r5, ip
 8003b20:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b24:	fb02 3311 	mls	r3, r2, r1, r3
 8003b28:	5cc3      	ldrb	r3, [r0, r3]
 8003b2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b2e:	460b      	mov	r3, r1
 8003b30:	2900      	cmp	r1, #0
 8003b32:	d1f5      	bne.n	8003b20 <_printf_i+0x16c>
 8003b34:	e7b9      	b.n	8003aaa <_printf_i+0xf6>
 8003b36:	6813      	ldr	r3, [r2, #0]
 8003b38:	6825      	ldr	r5, [r4, #0]
 8003b3a:	6961      	ldr	r1, [r4, #20]
 8003b3c:	1d18      	adds	r0, r3, #4
 8003b3e:	6010      	str	r0, [r2, #0]
 8003b40:	0628      	lsls	r0, r5, #24
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	d501      	bpl.n	8003b4a <_printf_i+0x196>
 8003b46:	6019      	str	r1, [r3, #0]
 8003b48:	e002      	b.n	8003b50 <_printf_i+0x19c>
 8003b4a:	066a      	lsls	r2, r5, #25
 8003b4c:	d5fb      	bpl.n	8003b46 <_printf_i+0x192>
 8003b4e:	8019      	strh	r1, [r3, #0]
 8003b50:	2300      	movs	r3, #0
 8003b52:	6123      	str	r3, [r4, #16]
 8003b54:	4665      	mov	r5, ip
 8003b56:	e7b9      	b.n	8003acc <_printf_i+0x118>
 8003b58:	6813      	ldr	r3, [r2, #0]
 8003b5a:	1d19      	adds	r1, r3, #4
 8003b5c:	6011      	str	r1, [r2, #0]
 8003b5e:	681d      	ldr	r5, [r3, #0]
 8003b60:	6862      	ldr	r2, [r4, #4]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4628      	mov	r0, r5
 8003b66:	f7fc fb5b 	bl	8000220 <memchr>
 8003b6a:	b108      	cbz	r0, 8003b70 <_printf_i+0x1bc>
 8003b6c:	1b40      	subs	r0, r0, r5
 8003b6e:	6060      	str	r0, [r4, #4]
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	6123      	str	r3, [r4, #16]
 8003b74:	2300      	movs	r3, #0
 8003b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b7a:	e7a7      	b.n	8003acc <_printf_i+0x118>
 8003b7c:	6923      	ldr	r3, [r4, #16]
 8003b7e:	462a      	mov	r2, r5
 8003b80:	4639      	mov	r1, r7
 8003b82:	4630      	mov	r0, r6
 8003b84:	47c0      	blx	r8
 8003b86:	3001      	adds	r0, #1
 8003b88:	d0aa      	beq.n	8003ae0 <_printf_i+0x12c>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	079b      	lsls	r3, r3, #30
 8003b8e:	d413      	bmi.n	8003bb8 <_printf_i+0x204>
 8003b90:	68e0      	ldr	r0, [r4, #12]
 8003b92:	9b03      	ldr	r3, [sp, #12]
 8003b94:	4298      	cmp	r0, r3
 8003b96:	bfb8      	it	lt
 8003b98:	4618      	movlt	r0, r3
 8003b9a:	e7a3      	b.n	8003ae4 <_printf_i+0x130>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	464a      	mov	r2, r9
 8003ba0:	4639      	mov	r1, r7
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	47c0      	blx	r8
 8003ba6:	3001      	adds	r0, #1
 8003ba8:	d09a      	beq.n	8003ae0 <_printf_i+0x12c>
 8003baa:	3501      	adds	r5, #1
 8003bac:	68e3      	ldr	r3, [r4, #12]
 8003bae:	9a03      	ldr	r2, [sp, #12]
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	42ab      	cmp	r3, r5
 8003bb4:	dcf2      	bgt.n	8003b9c <_printf_i+0x1e8>
 8003bb6:	e7eb      	b.n	8003b90 <_printf_i+0x1dc>
 8003bb8:	2500      	movs	r5, #0
 8003bba:	f104 0919 	add.w	r9, r4, #25
 8003bbe:	e7f5      	b.n	8003bac <_printf_i+0x1f8>
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1ac      	bne.n	8003b1e <_printf_i+0x16a>
 8003bc4:	7803      	ldrb	r3, [r0, #0]
 8003bc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bce:	e76c      	b.n	8003aaa <_printf_i+0xf6>
 8003bd0:	08004349 	.word	0x08004349
 8003bd4:	0800435a 	.word	0x0800435a

08003bd8 <_sbrk_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4c06      	ldr	r4, [pc, #24]	; (8003bf4 <_sbrk_r+0x1c>)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4605      	mov	r5, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	f7fc ff34 	bl	8000a50 <_sbrk>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_sbrk_r+0x1a>
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_sbrk_r+0x1a>
 8003bf0:	602b      	str	r3, [r5, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	2000018c 	.word	0x2000018c

08003bf8 <__sread>:
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c00:	f000 fa96 	bl	8004130 <_read_r>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	bfab      	itete	ge
 8003c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003c0c:	181b      	addge	r3, r3, r0
 8003c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c12:	bfac      	ite	ge
 8003c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c16:	81a3      	strhlt	r3, [r4, #12]
 8003c18:	bd10      	pop	{r4, pc}

08003c1a <__swrite>:
 8003c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1e:	461f      	mov	r7, r3
 8003c20:	898b      	ldrh	r3, [r1, #12]
 8003c22:	05db      	lsls	r3, r3, #23
 8003c24:	4605      	mov	r5, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	4616      	mov	r6, r2
 8003c2a:	d505      	bpl.n	8003c38 <__swrite+0x1e>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c34:	f000 f9b6 	bl	8003fa4 <_lseek_r>
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c42:	81a3      	strh	r3, [r4, #12]
 8003c44:	4632      	mov	r2, r6
 8003c46:	463b      	mov	r3, r7
 8003c48:	4628      	mov	r0, r5
 8003c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4e:	f000 b869 	b.w	8003d24 <_write_r>

08003c52 <__sseek>:
 8003c52:	b510      	push	{r4, lr}
 8003c54:	460c      	mov	r4, r1
 8003c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c5a:	f000 f9a3 	bl	8003fa4 <_lseek_r>
 8003c5e:	1c43      	adds	r3, r0, #1
 8003c60:	89a3      	ldrh	r3, [r4, #12]
 8003c62:	bf15      	itete	ne
 8003c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c6e:	81a3      	strheq	r3, [r4, #12]
 8003c70:	bf18      	it	ne
 8003c72:	81a3      	strhne	r3, [r4, #12]
 8003c74:	bd10      	pop	{r4, pc}

08003c76 <__sclose>:
 8003c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c7a:	f000 b8d3 	b.w	8003e24 <_close_r>
	...

08003c80 <__swbuf_r>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	460e      	mov	r6, r1
 8003c84:	4614      	mov	r4, r2
 8003c86:	4605      	mov	r5, r0
 8003c88:	b118      	cbz	r0, 8003c92 <__swbuf_r+0x12>
 8003c8a:	6983      	ldr	r3, [r0, #24]
 8003c8c:	b90b      	cbnz	r3, 8003c92 <__swbuf_r+0x12>
 8003c8e:	f7ff fbf7 	bl	8003480 <__sinit>
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <__swbuf_r+0x98>)
 8003c94:	429c      	cmp	r4, r3
 8003c96:	d12a      	bne.n	8003cee <__swbuf_r+0x6e>
 8003c98:	686c      	ldr	r4, [r5, #4]
 8003c9a:	69a3      	ldr	r3, [r4, #24]
 8003c9c:	60a3      	str	r3, [r4, #8]
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	071a      	lsls	r2, r3, #28
 8003ca2:	d52e      	bpl.n	8003d02 <__swbuf_r+0x82>
 8003ca4:	6923      	ldr	r3, [r4, #16]
 8003ca6:	b363      	cbz	r3, 8003d02 <__swbuf_r+0x82>
 8003ca8:	6923      	ldr	r3, [r4, #16]
 8003caa:	6820      	ldr	r0, [r4, #0]
 8003cac:	1ac0      	subs	r0, r0, r3
 8003cae:	6963      	ldr	r3, [r4, #20]
 8003cb0:	b2f6      	uxtb	r6, r6
 8003cb2:	4283      	cmp	r3, r0
 8003cb4:	4637      	mov	r7, r6
 8003cb6:	dc04      	bgt.n	8003cc2 <__swbuf_r+0x42>
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f000 f948 	bl	8003f50 <_fflush_r>
 8003cc0:	bb28      	cbnz	r0, 8003d0e <__swbuf_r+0x8e>
 8003cc2:	68a3      	ldr	r3, [r4, #8]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	60a3      	str	r3, [r4, #8]
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	701e      	strb	r6, [r3, #0]
 8003cd0:	6963      	ldr	r3, [r4, #20]
 8003cd2:	3001      	adds	r0, #1
 8003cd4:	4283      	cmp	r3, r0
 8003cd6:	d004      	beq.n	8003ce2 <__swbuf_r+0x62>
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	07db      	lsls	r3, r3, #31
 8003cdc:	d519      	bpl.n	8003d12 <__swbuf_r+0x92>
 8003cde:	2e0a      	cmp	r6, #10
 8003ce0:	d117      	bne.n	8003d12 <__swbuf_r+0x92>
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	f000 f933 	bl	8003f50 <_fflush_r>
 8003cea:	b190      	cbz	r0, 8003d12 <__swbuf_r+0x92>
 8003cec:	e00f      	b.n	8003d0e <__swbuf_r+0x8e>
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <__swbuf_r+0x9c>)
 8003cf0:	429c      	cmp	r4, r3
 8003cf2:	d101      	bne.n	8003cf8 <__swbuf_r+0x78>
 8003cf4:	68ac      	ldr	r4, [r5, #8]
 8003cf6:	e7d0      	b.n	8003c9a <__swbuf_r+0x1a>
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <__swbuf_r+0xa0>)
 8003cfa:	429c      	cmp	r4, r3
 8003cfc:	bf08      	it	eq
 8003cfe:	68ec      	ldreq	r4, [r5, #12]
 8003d00:	e7cb      	b.n	8003c9a <__swbuf_r+0x1a>
 8003d02:	4621      	mov	r1, r4
 8003d04:	4628      	mov	r0, r5
 8003d06:	f000 f81f 	bl	8003d48 <__swsetup_r>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d0cc      	beq.n	8003ca8 <__swbuf_r+0x28>
 8003d0e:	f04f 37ff 	mov.w	r7, #4294967295
 8003d12:	4638      	mov	r0, r7
 8003d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d16:	bf00      	nop
 8003d18:	080042f8 	.word	0x080042f8
 8003d1c:	08004318 	.word	0x08004318
 8003d20:	080042d8 	.word	0x080042d8

08003d24 <_write_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4c07      	ldr	r4, [pc, #28]	; (8003d44 <_write_r+0x20>)
 8003d28:	4605      	mov	r5, r0
 8003d2a:	4608      	mov	r0, r1
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	2200      	movs	r2, #0
 8003d30:	6022      	str	r2, [r4, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f7fc fe3b 	bl	80009ae <_write>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d102      	bne.n	8003d42 <_write_r+0x1e>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	b103      	cbz	r3, 8003d42 <_write_r+0x1e>
 8003d40:	602b      	str	r3, [r5, #0]
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	2000018c 	.word	0x2000018c

08003d48 <__swsetup_r>:
 8003d48:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <__swsetup_r+0xcc>)
 8003d4a:	b570      	push	{r4, r5, r6, lr}
 8003d4c:	681d      	ldr	r5, [r3, #0]
 8003d4e:	4606      	mov	r6, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	b125      	cbz	r5, 8003d5e <__swsetup_r+0x16>
 8003d54:	69ab      	ldr	r3, [r5, #24]
 8003d56:	b913      	cbnz	r3, 8003d5e <__swsetup_r+0x16>
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f7ff fb91 	bl	8003480 <__sinit>
 8003d5e:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <__swsetup_r+0xd0>)
 8003d60:	429c      	cmp	r4, r3
 8003d62:	d10f      	bne.n	8003d84 <__swsetup_r+0x3c>
 8003d64:	686c      	ldr	r4, [r5, #4]
 8003d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	0715      	lsls	r5, r2, #28
 8003d6e:	d42c      	bmi.n	8003dca <__swsetup_r+0x82>
 8003d70:	06d0      	lsls	r0, r2, #27
 8003d72:	d411      	bmi.n	8003d98 <__swsetup_r+0x50>
 8003d74:	2209      	movs	r2, #9
 8003d76:	6032      	str	r2, [r6, #0]
 8003d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d7c:	81a3      	strh	r3, [r4, #12]
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d82:	e03e      	b.n	8003e02 <__swsetup_r+0xba>
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <__swsetup_r+0xd4>)
 8003d86:	429c      	cmp	r4, r3
 8003d88:	d101      	bne.n	8003d8e <__swsetup_r+0x46>
 8003d8a:	68ac      	ldr	r4, [r5, #8]
 8003d8c:	e7eb      	b.n	8003d66 <__swsetup_r+0x1e>
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <__swsetup_r+0xd8>)
 8003d90:	429c      	cmp	r4, r3
 8003d92:	bf08      	it	eq
 8003d94:	68ec      	ldreq	r4, [r5, #12]
 8003d96:	e7e6      	b.n	8003d66 <__swsetup_r+0x1e>
 8003d98:	0751      	lsls	r1, r2, #29
 8003d9a:	d512      	bpl.n	8003dc2 <__swsetup_r+0x7a>
 8003d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d9e:	b141      	cbz	r1, 8003db2 <__swsetup_r+0x6a>
 8003da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003da4:	4299      	cmp	r1, r3
 8003da6:	d002      	beq.n	8003dae <__swsetup_r+0x66>
 8003da8:	4630      	mov	r0, r6
 8003daa:	f000 f973 	bl	8004094 <_free_r>
 8003dae:	2300      	movs	r3, #0
 8003db0:	6363      	str	r3, [r4, #52]	; 0x34
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003db8:	81a3      	strh	r3, [r4, #12]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	6063      	str	r3, [r4, #4]
 8003dbe:	6923      	ldr	r3, [r4, #16]
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	f043 0308 	orr.w	r3, r3, #8
 8003dc8:	81a3      	strh	r3, [r4, #12]
 8003dca:	6923      	ldr	r3, [r4, #16]
 8003dcc:	b94b      	cbnz	r3, 8003de2 <__swsetup_r+0x9a>
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd8:	d003      	beq.n	8003de2 <__swsetup_r+0x9a>
 8003dda:	4621      	mov	r1, r4
 8003ddc:	4630      	mov	r0, r6
 8003dde:	f000 f917 	bl	8004010 <__smakebuf_r>
 8003de2:	89a2      	ldrh	r2, [r4, #12]
 8003de4:	f012 0301 	ands.w	r3, r2, #1
 8003de8:	d00c      	beq.n	8003e04 <__swsetup_r+0xbc>
 8003dea:	2300      	movs	r3, #0
 8003dec:	60a3      	str	r3, [r4, #8]
 8003dee:	6963      	ldr	r3, [r4, #20]
 8003df0:	425b      	negs	r3, r3
 8003df2:	61a3      	str	r3, [r4, #24]
 8003df4:	6923      	ldr	r3, [r4, #16]
 8003df6:	b953      	cbnz	r3, 8003e0e <__swsetup_r+0xc6>
 8003df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dfc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003e00:	d1ba      	bne.n	8003d78 <__swsetup_r+0x30>
 8003e02:	bd70      	pop	{r4, r5, r6, pc}
 8003e04:	0792      	lsls	r2, r2, #30
 8003e06:	bf58      	it	pl
 8003e08:	6963      	ldrpl	r3, [r4, #20]
 8003e0a:	60a3      	str	r3, [r4, #8]
 8003e0c:	e7f2      	b.n	8003df4 <__swsetup_r+0xac>
 8003e0e:	2000      	movs	r0, #0
 8003e10:	e7f7      	b.n	8003e02 <__swsetup_r+0xba>
 8003e12:	bf00      	nop
 8003e14:	20000070 	.word	0x20000070
 8003e18:	080042f8 	.word	0x080042f8
 8003e1c:	08004318 	.word	0x08004318
 8003e20:	080042d8 	.word	0x080042d8

08003e24 <_close_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4c06      	ldr	r4, [pc, #24]	; (8003e40 <_close_r+0x1c>)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4605      	mov	r5, r0
 8003e2c:	4608      	mov	r0, r1
 8003e2e:	6023      	str	r3, [r4, #0]
 8003e30:	f7fc fdd9 	bl	80009e6 <_close>
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	d102      	bne.n	8003e3e <_close_r+0x1a>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	b103      	cbz	r3, 8003e3e <_close_r+0x1a>
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	bd38      	pop	{r3, r4, r5, pc}
 8003e40:	2000018c 	.word	0x2000018c

08003e44 <__sflush_r>:
 8003e44:	898a      	ldrh	r2, [r1, #12]
 8003e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	0710      	lsls	r0, r2, #28
 8003e4e:	460c      	mov	r4, r1
 8003e50:	d458      	bmi.n	8003f04 <__sflush_r+0xc0>
 8003e52:	684b      	ldr	r3, [r1, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	dc05      	bgt.n	8003e64 <__sflush_r+0x20>
 8003e58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	dc02      	bgt.n	8003e64 <__sflush_r+0x20>
 8003e5e:	2000      	movs	r0, #0
 8003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e66:	2e00      	cmp	r6, #0
 8003e68:	d0f9      	beq.n	8003e5e <__sflush_r+0x1a>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e70:	682f      	ldr	r7, [r5, #0]
 8003e72:	6a21      	ldr	r1, [r4, #32]
 8003e74:	602b      	str	r3, [r5, #0]
 8003e76:	d032      	beq.n	8003ede <__sflush_r+0x9a>
 8003e78:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	075a      	lsls	r2, r3, #29
 8003e7e:	d505      	bpl.n	8003e8c <__sflush_r+0x48>
 8003e80:	6863      	ldr	r3, [r4, #4]
 8003e82:	1ac0      	subs	r0, r0, r3
 8003e84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e86:	b10b      	cbz	r3, 8003e8c <__sflush_r+0x48>
 8003e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e8a:	1ac0      	subs	r0, r0, r3
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	4602      	mov	r2, r0
 8003e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e92:	6a21      	ldr	r1, [r4, #32]
 8003e94:	4628      	mov	r0, r5
 8003e96:	47b0      	blx	r6
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	89a3      	ldrh	r3, [r4, #12]
 8003e9c:	d106      	bne.n	8003eac <__sflush_r+0x68>
 8003e9e:	6829      	ldr	r1, [r5, #0]
 8003ea0:	291d      	cmp	r1, #29
 8003ea2:	d848      	bhi.n	8003f36 <__sflush_r+0xf2>
 8003ea4:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <__sflush_r+0x108>)
 8003ea6:	40ca      	lsrs	r2, r1
 8003ea8:	07d6      	lsls	r6, r2, #31
 8003eaa:	d544      	bpl.n	8003f36 <__sflush_r+0xf2>
 8003eac:	2200      	movs	r2, #0
 8003eae:	6062      	str	r2, [r4, #4]
 8003eb0:	04d9      	lsls	r1, r3, #19
 8003eb2:	6922      	ldr	r2, [r4, #16]
 8003eb4:	6022      	str	r2, [r4, #0]
 8003eb6:	d504      	bpl.n	8003ec2 <__sflush_r+0x7e>
 8003eb8:	1c42      	adds	r2, r0, #1
 8003eba:	d101      	bne.n	8003ec0 <__sflush_r+0x7c>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	b903      	cbnz	r3, 8003ec2 <__sflush_r+0x7e>
 8003ec0:	6560      	str	r0, [r4, #84]	; 0x54
 8003ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ec4:	602f      	str	r7, [r5, #0]
 8003ec6:	2900      	cmp	r1, #0
 8003ec8:	d0c9      	beq.n	8003e5e <__sflush_r+0x1a>
 8003eca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ece:	4299      	cmp	r1, r3
 8003ed0:	d002      	beq.n	8003ed8 <__sflush_r+0x94>
 8003ed2:	4628      	mov	r0, r5
 8003ed4:	f000 f8de 	bl	8004094 <_free_r>
 8003ed8:	2000      	movs	r0, #0
 8003eda:	6360      	str	r0, [r4, #52]	; 0x34
 8003edc:	e7c0      	b.n	8003e60 <__sflush_r+0x1c>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	47b0      	blx	r6
 8003ee4:	1c41      	adds	r1, r0, #1
 8003ee6:	d1c8      	bne.n	8003e7a <__sflush_r+0x36>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0c5      	beq.n	8003e7a <__sflush_r+0x36>
 8003eee:	2b1d      	cmp	r3, #29
 8003ef0:	d001      	beq.n	8003ef6 <__sflush_r+0xb2>
 8003ef2:	2b16      	cmp	r3, #22
 8003ef4:	d101      	bne.n	8003efa <__sflush_r+0xb6>
 8003ef6:	602f      	str	r7, [r5, #0]
 8003ef8:	e7b1      	b.n	8003e5e <__sflush_r+0x1a>
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f00:	81a3      	strh	r3, [r4, #12]
 8003f02:	e7ad      	b.n	8003e60 <__sflush_r+0x1c>
 8003f04:	690f      	ldr	r7, [r1, #16]
 8003f06:	2f00      	cmp	r7, #0
 8003f08:	d0a9      	beq.n	8003e5e <__sflush_r+0x1a>
 8003f0a:	0793      	lsls	r3, r2, #30
 8003f0c:	680e      	ldr	r6, [r1, #0]
 8003f0e:	bf08      	it	eq
 8003f10:	694b      	ldreq	r3, [r1, #20]
 8003f12:	600f      	str	r7, [r1, #0]
 8003f14:	bf18      	it	ne
 8003f16:	2300      	movne	r3, #0
 8003f18:	eba6 0807 	sub.w	r8, r6, r7
 8003f1c:	608b      	str	r3, [r1, #8]
 8003f1e:	f1b8 0f00 	cmp.w	r8, #0
 8003f22:	dd9c      	ble.n	8003e5e <__sflush_r+0x1a>
 8003f24:	4643      	mov	r3, r8
 8003f26:	463a      	mov	r2, r7
 8003f28:	6a21      	ldr	r1, [r4, #32]
 8003f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	47b0      	blx	r6
 8003f30:	2800      	cmp	r0, #0
 8003f32:	dc06      	bgt.n	8003f42 <__sflush_r+0xfe>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f3a:	81a3      	strh	r3, [r4, #12]
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	e78e      	b.n	8003e60 <__sflush_r+0x1c>
 8003f42:	4407      	add	r7, r0
 8003f44:	eba8 0800 	sub.w	r8, r8, r0
 8003f48:	e7e9      	b.n	8003f1e <__sflush_r+0xda>
 8003f4a:	bf00      	nop
 8003f4c:	20400001 	.word	0x20400001

08003f50 <_fflush_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	690b      	ldr	r3, [r1, #16]
 8003f54:	4605      	mov	r5, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	b1db      	cbz	r3, 8003f92 <_fflush_r+0x42>
 8003f5a:	b118      	cbz	r0, 8003f64 <_fflush_r+0x14>
 8003f5c:	6983      	ldr	r3, [r0, #24]
 8003f5e:	b90b      	cbnz	r3, 8003f64 <_fflush_r+0x14>
 8003f60:	f7ff fa8e 	bl	8003480 <__sinit>
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <_fflush_r+0x48>)
 8003f66:	429c      	cmp	r4, r3
 8003f68:	d109      	bne.n	8003f7e <_fflush_r+0x2e>
 8003f6a:	686c      	ldr	r4, [r5, #4]
 8003f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f70:	b17b      	cbz	r3, 8003f92 <_fflush_r+0x42>
 8003f72:	4621      	mov	r1, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f7a:	f7ff bf63 	b.w	8003e44 <__sflush_r>
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <_fflush_r+0x4c>)
 8003f80:	429c      	cmp	r4, r3
 8003f82:	d101      	bne.n	8003f88 <_fflush_r+0x38>
 8003f84:	68ac      	ldr	r4, [r5, #8]
 8003f86:	e7f1      	b.n	8003f6c <_fflush_r+0x1c>
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <_fflush_r+0x50>)
 8003f8a:	429c      	cmp	r4, r3
 8003f8c:	bf08      	it	eq
 8003f8e:	68ec      	ldreq	r4, [r5, #12]
 8003f90:	e7ec      	b.n	8003f6c <_fflush_r+0x1c>
 8003f92:	2000      	movs	r0, #0
 8003f94:	bd38      	pop	{r3, r4, r5, pc}
 8003f96:	bf00      	nop
 8003f98:	080042f8 	.word	0x080042f8
 8003f9c:	08004318 	.word	0x08004318
 8003fa0:	080042d8 	.word	0x080042d8

08003fa4 <_lseek_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4c07      	ldr	r4, [pc, #28]	; (8003fc4 <_lseek_r+0x20>)
 8003fa8:	4605      	mov	r5, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	6022      	str	r2, [r4, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7fc fd3e 	bl	8000a34 <_lseek>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_lseek_r+0x1e>
 8003fbc:	6823      	ldr	r3, [r4, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_lseek_r+0x1e>
 8003fc0:	602b      	str	r3, [r5, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	2000018c 	.word	0x2000018c

08003fc8 <__swhatbuf_r>:
 8003fc8:	b570      	push	{r4, r5, r6, lr}
 8003fca:	460e      	mov	r6, r1
 8003fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd0:	2900      	cmp	r1, #0
 8003fd2:	b096      	sub	sp, #88	; 0x58
 8003fd4:	4614      	mov	r4, r2
 8003fd6:	461d      	mov	r5, r3
 8003fd8:	da07      	bge.n	8003fea <__swhatbuf_r+0x22>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	602b      	str	r3, [r5, #0]
 8003fde:	89b3      	ldrh	r3, [r6, #12]
 8003fe0:	061a      	lsls	r2, r3, #24
 8003fe2:	d410      	bmi.n	8004006 <__swhatbuf_r+0x3e>
 8003fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe8:	e00e      	b.n	8004008 <__swhatbuf_r+0x40>
 8003fea:	466a      	mov	r2, sp
 8003fec:	f000 f8b2 	bl	8004154 <_fstat_r>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	dbf2      	blt.n	8003fda <__swhatbuf_r+0x12>
 8003ff4:	9a01      	ldr	r2, [sp, #4]
 8003ff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003ffa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ffe:	425a      	negs	r2, r3
 8004000:	415a      	adcs	r2, r3
 8004002:	602a      	str	r2, [r5, #0]
 8004004:	e7ee      	b.n	8003fe4 <__swhatbuf_r+0x1c>
 8004006:	2340      	movs	r3, #64	; 0x40
 8004008:	2000      	movs	r0, #0
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	b016      	add	sp, #88	; 0x58
 800400e:	bd70      	pop	{r4, r5, r6, pc}

08004010 <__smakebuf_r>:
 8004010:	898b      	ldrh	r3, [r1, #12]
 8004012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004014:	079d      	lsls	r5, r3, #30
 8004016:	4606      	mov	r6, r0
 8004018:	460c      	mov	r4, r1
 800401a:	d507      	bpl.n	800402c <__smakebuf_r+0x1c>
 800401c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	2301      	movs	r3, #1
 8004026:	6163      	str	r3, [r4, #20]
 8004028:	b002      	add	sp, #8
 800402a:	bd70      	pop	{r4, r5, r6, pc}
 800402c:	ab01      	add	r3, sp, #4
 800402e:	466a      	mov	r2, sp
 8004030:	f7ff ffca 	bl	8003fc8 <__swhatbuf_r>
 8004034:	9900      	ldr	r1, [sp, #0]
 8004036:	4605      	mov	r5, r0
 8004038:	4630      	mov	r0, r6
 800403a:	f7ff faab 	bl	8003594 <_malloc_r>
 800403e:	b948      	cbnz	r0, 8004054 <__smakebuf_r+0x44>
 8004040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004044:	059a      	lsls	r2, r3, #22
 8004046:	d4ef      	bmi.n	8004028 <__smakebuf_r+0x18>
 8004048:	f023 0303 	bic.w	r3, r3, #3
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	e7e3      	b.n	800401c <__smakebuf_r+0xc>
 8004054:	4b0d      	ldr	r3, [pc, #52]	; (800408c <__smakebuf_r+0x7c>)
 8004056:	62b3      	str	r3, [r6, #40]	; 0x28
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	6020      	str	r0, [r4, #0]
 800405c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004060:	81a3      	strh	r3, [r4, #12]
 8004062:	9b00      	ldr	r3, [sp, #0]
 8004064:	6163      	str	r3, [r4, #20]
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	6120      	str	r0, [r4, #16]
 800406a:	b15b      	cbz	r3, 8004084 <__smakebuf_r+0x74>
 800406c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004070:	4630      	mov	r0, r6
 8004072:	f000 f881 	bl	8004178 <_isatty_r>
 8004076:	b128      	cbz	r0, 8004084 <__smakebuf_r+0x74>
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	f023 0303 	bic.w	r3, r3, #3
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	81a3      	strh	r3, [r4, #12]
 8004084:	89a3      	ldrh	r3, [r4, #12]
 8004086:	431d      	orrs	r5, r3
 8004088:	81a5      	strh	r5, [r4, #12]
 800408a:	e7cd      	b.n	8004028 <__smakebuf_r+0x18>
 800408c:	08003449 	.word	0x08003449

08004090 <__malloc_lock>:
 8004090:	4770      	bx	lr

08004092 <__malloc_unlock>:
 8004092:	4770      	bx	lr

08004094 <_free_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4605      	mov	r5, r0
 8004098:	2900      	cmp	r1, #0
 800409a:	d045      	beq.n	8004128 <_free_r+0x94>
 800409c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040a0:	1f0c      	subs	r4, r1, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	bfb8      	it	lt
 80040a6:	18e4      	addlt	r4, r4, r3
 80040a8:	f7ff fff2 	bl	8004090 <__malloc_lock>
 80040ac:	4a1f      	ldr	r2, [pc, #124]	; (800412c <_free_r+0x98>)
 80040ae:	6813      	ldr	r3, [r2, #0]
 80040b0:	4610      	mov	r0, r2
 80040b2:	b933      	cbnz	r3, 80040c2 <_free_r+0x2e>
 80040b4:	6063      	str	r3, [r4, #4]
 80040b6:	6014      	str	r4, [r2, #0]
 80040b8:	4628      	mov	r0, r5
 80040ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040be:	f7ff bfe8 	b.w	8004092 <__malloc_unlock>
 80040c2:	42a3      	cmp	r3, r4
 80040c4:	d90c      	bls.n	80040e0 <_free_r+0x4c>
 80040c6:	6821      	ldr	r1, [r4, #0]
 80040c8:	1862      	adds	r2, r4, r1
 80040ca:	4293      	cmp	r3, r2
 80040cc:	bf04      	itt	eq
 80040ce:	681a      	ldreq	r2, [r3, #0]
 80040d0:	685b      	ldreq	r3, [r3, #4]
 80040d2:	6063      	str	r3, [r4, #4]
 80040d4:	bf04      	itt	eq
 80040d6:	1852      	addeq	r2, r2, r1
 80040d8:	6022      	streq	r2, [r4, #0]
 80040da:	6004      	str	r4, [r0, #0]
 80040dc:	e7ec      	b.n	80040b8 <_free_r+0x24>
 80040de:	4613      	mov	r3, r2
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	b10a      	cbz	r2, 80040e8 <_free_r+0x54>
 80040e4:	42a2      	cmp	r2, r4
 80040e6:	d9fa      	bls.n	80040de <_free_r+0x4a>
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	1858      	adds	r0, r3, r1
 80040ec:	42a0      	cmp	r0, r4
 80040ee:	d10b      	bne.n	8004108 <_free_r+0x74>
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	4401      	add	r1, r0
 80040f4:	1858      	adds	r0, r3, r1
 80040f6:	4282      	cmp	r2, r0
 80040f8:	6019      	str	r1, [r3, #0]
 80040fa:	d1dd      	bne.n	80040b8 <_free_r+0x24>
 80040fc:	6810      	ldr	r0, [r2, #0]
 80040fe:	6852      	ldr	r2, [r2, #4]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	4401      	add	r1, r0
 8004104:	6019      	str	r1, [r3, #0]
 8004106:	e7d7      	b.n	80040b8 <_free_r+0x24>
 8004108:	d902      	bls.n	8004110 <_free_r+0x7c>
 800410a:	230c      	movs	r3, #12
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	e7d3      	b.n	80040b8 <_free_r+0x24>
 8004110:	6820      	ldr	r0, [r4, #0]
 8004112:	1821      	adds	r1, r4, r0
 8004114:	428a      	cmp	r2, r1
 8004116:	bf04      	itt	eq
 8004118:	6811      	ldreq	r1, [r2, #0]
 800411a:	6852      	ldreq	r2, [r2, #4]
 800411c:	6062      	str	r2, [r4, #4]
 800411e:	bf04      	itt	eq
 8004120:	1809      	addeq	r1, r1, r0
 8004122:	6021      	streq	r1, [r4, #0]
 8004124:	605c      	str	r4, [r3, #4]
 8004126:	e7c7      	b.n	80040b8 <_free_r+0x24>
 8004128:	bd38      	pop	{r3, r4, r5, pc}
 800412a:	bf00      	nop
 800412c:	200000f8 	.word	0x200000f8

08004130 <_read_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4c07      	ldr	r4, [pc, #28]	; (8004150 <_read_r+0x20>)
 8004134:	4605      	mov	r5, r0
 8004136:	4608      	mov	r0, r1
 8004138:	4611      	mov	r1, r2
 800413a:	2200      	movs	r2, #0
 800413c:	6022      	str	r2, [r4, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	f7fc fc18 	bl	8000974 <_read>
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	d102      	bne.n	800414e <_read_r+0x1e>
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	b103      	cbz	r3, 800414e <_read_r+0x1e>
 800414c:	602b      	str	r3, [r5, #0]
 800414e:	bd38      	pop	{r3, r4, r5, pc}
 8004150:	2000018c 	.word	0x2000018c

08004154 <_fstat_r>:
 8004154:	b538      	push	{r3, r4, r5, lr}
 8004156:	4c07      	ldr	r4, [pc, #28]	; (8004174 <_fstat_r+0x20>)
 8004158:	2300      	movs	r3, #0
 800415a:	4605      	mov	r5, r0
 800415c:	4608      	mov	r0, r1
 800415e:	4611      	mov	r1, r2
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	f7fc fc4c 	bl	80009fe <_fstat>
 8004166:	1c43      	adds	r3, r0, #1
 8004168:	d102      	bne.n	8004170 <_fstat_r+0x1c>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	b103      	cbz	r3, 8004170 <_fstat_r+0x1c>
 800416e:	602b      	str	r3, [r5, #0]
 8004170:	bd38      	pop	{r3, r4, r5, pc}
 8004172:	bf00      	nop
 8004174:	2000018c 	.word	0x2000018c

08004178 <_isatty_r>:
 8004178:	b538      	push	{r3, r4, r5, lr}
 800417a:	4c06      	ldr	r4, [pc, #24]	; (8004194 <_isatty_r+0x1c>)
 800417c:	2300      	movs	r3, #0
 800417e:	4605      	mov	r5, r0
 8004180:	4608      	mov	r0, r1
 8004182:	6023      	str	r3, [r4, #0]
 8004184:	f7fc fc4b 	bl	8000a1e <_isatty>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d102      	bne.n	8004192 <_isatty_r+0x1a>
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	b103      	cbz	r3, 8004192 <_isatty_r+0x1a>
 8004190:	602b      	str	r3, [r5, #0]
 8004192:	bd38      	pop	{r3, r4, r5, pc}
 8004194:	2000018c 	.word	0x2000018c

08004198 <_init>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	bf00      	nop
 800419c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419e:	bc08      	pop	{r3}
 80041a0:	469e      	mov	lr, r3
 80041a2:	4770      	bx	lr

080041a4 <_fini>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	bf00      	nop
 80041a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041aa:	bc08      	pop	{r3}
 80041ac:	469e      	mov	lr, r3
 80041ae:	4770      	bx	lr
